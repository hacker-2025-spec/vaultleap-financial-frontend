export enum TRANSACTION_TYPES {
  CREATE_VAULT = 'CREATE_VAULT',
  CREATE_VAULTS = 'CREATE_VAULTS',
  // CREATE_VAULTS_SINGLE transaction type is used in case of creating multiple vaults when amount of vaults equals 1
  CREATE_VAULTS_SINGLE = 'CREATE_VAULTS_SINGLE',
  SEND_FUNDS_TO_VAULT = 'SEND_FUNDS_TO_VAULT',
  CLAIM_VAULT_KEY = 'CLAIM_VAULT_KEY',
  CLAIM_REWARD = 'CLAIM_REWARD',
  TRANSFER_VAULT = 'TRANSFER_VAULT',
  WITHDRAW_USDC = 'WITHDRAW_USDC',
  RECLAIM_VAULT_KEY = 'RECLAIM_VAULT_KEY',
  CREATE_SELF_MANAGED_VAULT = 'CREATE_SELF_MANAGED_VAULT',
  CLAIM_SELF_MANAGED_VAULT_KEYS = 'CLAIM_SELF_MANAGED_VAULT_KEYS'
}

export enum CREATE_VAULT_STAGES {
  INITIALIZE_VAULT = 'INITIALIZE_VAULT',
  SUBMIT_VAULT_CONTRACTS_DEPLOYMENTS = 'DEPLOY_VAULT_CONTRACTS',
  WAIT_FOR_VAULT_CONTRACTS_DEPLOYMENT = 'WAIT_FOR_VAULT_CONTRACTS_DEPLOYMENTS',
  SEND_VAULT_SUMMARY = 'SEND_VAULT_SUMMARY',
  SEND_VAULT_INVITATIONS = 'SEND_VAULT_INVITATIONS',
}

export enum CREATE_VAULTS_STAGES {
  INITIALIZE_VAULTS = 'INITIALIZE_VAULTS',
  SUBMIT_VAULTS_CONTRACTS = 'DEPLOY_VAULTS_CONTRACTS',
  SEND_VAULTS_EMAILS = 'SEND_VAULTS_EMAILS',
}

// CREATE_VAULTS_SINGLE transaction type is used in case of creating multiple vaults when amount of vaults equals 1
export enum CREATE_VAULTS_SINGLE_STAGES {
  INITIALIZE_VAULTS = 'SINGLE_INITIALIZE_VAULTS',
  SUBMIT_VAULTS_CONTRACTS = 'SIGNLE_DEPLOY_VAULTS_CONTRACTS',
  SEND_VAULTS_EMAILS = 'SINGLE_SEND_VAULTS_EMAILS',
}

export enum SEND_FUNDS_TO_VAULT_STAGES {
  CHECKING_VAULT = 'CHECKING_VAULT',
  CHECKING_ALLOWANCE = 'CHECKING_ALLOWANCE',
  APPROVING_FUNDS = 'APPROVING_FUNDS',
  SENDING_FUNDS = 'SENDING_FUNDS',
}

export enum CLAIMING_REWARDS_STAGES {
  CLAIMING_FUNDS = 'CLAIMING_FUNDS'
}

export enum CLAIM_VAULT_KEY_STAGES {
  SYNCHRONIZE_CONTRACTS = 'SYNCHRONIZE_CONTRACTS',
  SIGNING_TRANSACTION = 'SIGNING_TRANSACTION',
  WAIT_FOR_TRANSACTION_CONFIRMATION = 'WAIT_FOR_TRANSACTION_CONFIRMATION',
}

export enum RECLAIM_VAULT_KEY_STAGES {
  SYNCHRONIZE_CONTRACTS = 'RECLAIM_SYNCHRONIZE_CONTRACTS',
  WAIT_FOR_TRANSACTION_CONFIRMATION = 'RECLAIM_WAIT_FOR_TRANSACTION_CONFIRMATION',
}

export enum TRANSFER_VAULT_STAGES {
  SENDING_VAULT_KEYS = 'SENDING_VAULT_KEYS',
}

export enum WITHDRAW_USDC_STAGES {
  SENDING_USDC = 'SENDING_USDC',
}

export enum CREATE_SELF_MANAGED_VAULT_STAGES {
  INITIALIZE_VAULT = 'SELF_MANAGED_INITIALIZE_VAULT',
  WAIT_FOR_VAULT_CONTRACT_DEPLOYMENT = 'SELF_MANAGED_WAIT_FOR_VAULT_CONTRACTS_DEPLOYMENT',
  CLAIMING_VAULT_KEYS = 'SELF_MANAGED_CLAIMING_VAULT_KEYS'
}

export enum CLAIM_SELF_MANAGED_VAULT_KEYS_STAGES {
  CLAIMING_VAULT_KEYS = 'CLAIM_SELF_MANAGED_CLAIMING_VAULT_KEYS'
}

export type TAvailableTransactionStages = CREATE_VAULT_STAGES | CREATE_VAULTS_STAGES | SEND_FUNDS_TO_VAULT_STAGES | CLAIMING_REWARDS_STAGES | CLAIM_VAULT_KEY_STAGES | TRANSFER_VAULT_STAGES | WITHDRAW_USDC_STAGES | RECLAIM_VAULT_KEY_STAGES | CREATE_SELF_MANAGED_VAULT_STAGES | CLAIM_SELF_MANAGED_VAULT_KEYS_STAGES | CREATE_VAULTS_SINGLE_STAGES

export const TransactionStagesList: Record<TRANSACTION_TYPES, TAvailableTransactionStages[]> = {
  [TRANSACTION_TYPES.CREATE_VAULT]: [
    CREATE_VAULT_STAGES.INITIALIZE_VAULT,
    CREATE_VAULT_STAGES.SUBMIT_VAULT_CONTRACTS_DEPLOYMENTS,
    CREATE_VAULT_STAGES.WAIT_FOR_VAULT_CONTRACTS_DEPLOYMENT,
    CREATE_VAULT_STAGES.SEND_VAULT_SUMMARY,
    CREATE_VAULT_STAGES.SEND_VAULT_INVITATIONS,
  ],
  [TRANSACTION_TYPES.CREATE_VAULTS]: [
    CREATE_VAULTS_STAGES.INITIALIZE_VAULTS,
    CREATE_VAULTS_STAGES.SUBMIT_VAULTS_CONTRACTS,
    CREATE_VAULTS_STAGES.SEND_VAULTS_EMAILS,
  ],
  // CREATE_VAULTS_SINGLE transaction type is used in case of creating multiple vaults when amount of vaults equals 1
  [TRANSACTION_TYPES.CREATE_VAULTS_SINGLE]: [
    CREATE_VAULTS_SINGLE_STAGES.INITIALIZE_VAULTS,
    CREATE_VAULTS_SINGLE_STAGES.SUBMIT_VAULTS_CONTRACTS,
    CREATE_VAULTS_SINGLE_STAGES.SEND_VAULTS_EMAILS,
  ],
  [TRANSACTION_TYPES.SEND_FUNDS_TO_VAULT]: [
    SEND_FUNDS_TO_VAULT_STAGES.CHECKING_VAULT,
    SEND_FUNDS_TO_VAULT_STAGES.CHECKING_ALLOWANCE,
    SEND_FUNDS_TO_VAULT_STAGES.APPROVING_FUNDS,
    SEND_FUNDS_TO_VAULT_STAGES.SENDING_FUNDS,
  ],
  [TRANSACTION_TYPES.CLAIM_VAULT_KEY]: [
    CLAIM_VAULT_KEY_STAGES.SYNCHRONIZE_CONTRACTS,
    CLAIM_VAULT_KEY_STAGES.SIGNING_TRANSACTION,
    CLAIM_VAULT_KEY_STAGES.WAIT_FOR_TRANSACTION_CONFIRMATION,
  ],
  [TRANSACTION_TYPES.CLAIM_REWARD]: [
    CLAIMING_REWARDS_STAGES.CLAIMING_FUNDS,
  ],
  [TRANSACTION_TYPES.TRANSFER_VAULT]: [
    TRANSFER_VAULT_STAGES.SENDING_VAULT_KEYS,
  ],
  [TRANSACTION_TYPES.WITHDRAW_USDC]: [
    WITHDRAW_USDC_STAGES.SENDING_USDC,
  ],
  [TRANSACTION_TYPES.RECLAIM_VAULT_KEY]: [
    RECLAIM_VAULT_KEY_STAGES.SYNCHRONIZE_CONTRACTS,
    RECLAIM_VAULT_KEY_STAGES.WAIT_FOR_TRANSACTION_CONFIRMATION,
  ],
  [TRANSACTION_TYPES.CREATE_SELF_MANAGED_VAULT]: [
    CREATE_SELF_MANAGED_VAULT_STAGES.INITIALIZE_VAULT,
    CREATE_SELF_MANAGED_VAULT_STAGES.WAIT_FOR_VAULT_CONTRACT_DEPLOYMENT,
    CREATE_SELF_MANAGED_VAULT_STAGES.CLAIMING_VAULT_KEYS,
  ],
  [TRANSACTION_TYPES.CLAIM_SELF_MANAGED_VAULT_KEYS]: [
    CLAIM_SELF_MANAGED_VAULT_KEYS_STAGES.CLAIMING_VAULT_KEYS,
  ]
}

export enum SAGA_TRANSACTION_STATUS {
  IDLE = 'IDLE',
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS',
  FAILURE = 'FAILURE',
}

export interface Transaction {
  isModalOpen: boolean
  currentProcessedTransaction: TRANSACTION_TYPES | null
  allStages: TAvailableTransactionStages[]
  reaminingStages: TAvailableTransactionStages[]
  currentStage: TAvailableTransactionStages | null
  error: string | null
  sagaTransactionStatus: SAGA_TRANSACTION_STATUS
}
