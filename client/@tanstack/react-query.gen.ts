// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios'
import { queryOptions, type UseMutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query'
import type {
  UpdateUserDetailsData,
  UpdateUserDetailsResponse,
  UpdatePrivyWalletAddressesData,
  UpdatePrivyWalletAddressesResponse,
  UploadAvatarData,
  UploadAvatarResponse,
  UploadAvatarFileData,
  UploadAvatarFileResponse,
  DeleteAvatarData,
  DeleteAvatarResponse,
  GetMeData,
  GetAllFormsData,
  RequestTaxFormAccessData,
  RequestTaxFormAccessResponse,
  AccessTaxFormData,
  AccessTaxFormResponse,
  TaxFormDownloadedData,
  CreateTaxInfoData,
  CreateTaxInfoResponse,
  GetLatestVaultOwnerTaxInfoData,
  ProcessCreatorConfigData,
  ProcessCreatorConfigResponse,
  CreateTransactionData,
  CreateTransactionResponse,
  GetCurrentUserWalletsData,
  CheckWalletData,
  CheckWalletResponse,
  CreateWalletData,
  CreateWalletResponse,
  GetTokenData,
  AddApplicantData,
  AddApplicantResponse,
  CreateVaultsData,
  CreateVaultsResponse,
  GetVaultsCreationStatusData,
  GetVaultsInfoData,
  PaymasterData,
  PaymasterResponse,
  CreateFundingNoteData,
  CreateCustomData,
  CreateCustomResponse,
  CreateBankingInfoData,
  CreateBankingInfoResponse,
  CheckKycData,
  CheckKycResponse,
  CreateLiquidationAddressData,
  CreateLiquidationAddressResponse,
  GetLiqAddressDrainHistoryData,
  GetLiqAddressDrainHistoryResponse,
  GetBankingInfoData,
  GetBankingInfoByIdData,
  GetLiquidationAddressByAuth0IdData,
  GetLiquidationAddressByIdData,
  GetVirtualAccountsByAuth0IdData,
  CreateVirtualAccountData,
  CreateVirtualAccountResponse,
  GetUnifiedAccountsData,
  CreateUnifiedAccountData,
  CreateUnifiedAccountResponse,
  GetVirtualAccountByIdData,
  UpdateVirtualAccountData,
  UpdateVirtualAccountResponse,
  GetVirtualAccountActvityData,
  GetVirtualAccountActivityPaginatedData,
  GetDirectRecipientsData,
  GetDirectRecipientByIdData,
  GetAllUserVaultsData,
  GetVaultByIdData,
  GetVaultInfoByIdData,
  GetVaultInfoByIdAndTokenIdData,
  GetVaultTransactionStatusData,
  GetSelfManagedVaultTransactionStatusData,
  CreateVaultData,
  CreateVaultResponse,
  UpdateRoleEmailData,
  UpdateRoleEmailResponse,
  FinishSelfManagedVaultClaimData,
  FinishSelfManagedVaultClaimResponse,
  UnwatchVaultData,
  UnwatchVaultResponse,
  WatchAllVaultsData,
  WatchAllVaultsResponse,
  GetVaultKeysData,
  CreateSelfManagedVaultData,
  CreateSelfManagedVaultResponse,
  SignVaultTransactionData,
  SignVaultTransactionResponse,
  CreateInquiryIdData,
  CreateInquiryIdResponse,
  UpdateApplicantData,
  UpdateApplicantResponse,
  CreateData,
  FindData,
  HandleAlchemyWebhookData,
  FileTicketData,
  GetTransactionItemsData,
  GetTransactionItemsResponse,
  GetTransactionItemByIdData,
  GetTransactionItemsByVirtualAccountIdData,
  TestUpsertData,
  GetForexRatesData,
  GetUserForexRatesData,
  FetchForexRatesData,
  CheckData,
  TestData,
} from '../types.gen'
import type { AxiosError } from 'axios'
import {
  client,
  updateUserDetails,
  updatePrivyWalletAddresses,
  uploadAvatar,
  uploadAvatarFile,
  deleteAvatar,
  getMe,
  getAllForms,
  requestTaxFormAccess,
  accessTaxForm,
  taxFormDownloaded,
  createTaxInfo,
  getLatestVaultOwnerTaxInfo,
  processCreatorConfig,
  createTransaction,
  getCurrentUserWallets,
  checkWallet,
  createWallet,
  getToken,
  addApplicant,
  createVaults,
  getVaultsCreationStatus,
  getVaultsInfo,
  paymaster,
  createFundingNote,
  createCustom,
  createBankingInfo,
  checkKyc,
  createLiquidationAddress,
  getLiqAddressDrainHistory,
  getBankingInfo,
  getBankingInfoById,
  getLiquidationAddressByAuth0Id,
  getLiquidationAddressById,
  getVirtualAccountsByAuth0Id,
  createVirtualAccount,
  getUnifiedAccounts,
  createUnifiedAccount,
  getVirtualAccountById,
  updateVirtualAccount,
  getVirtualAccountActvity,
  getVirtualAccountActivityPaginated,
  getDirectRecipients,
  getDirectRecipientById,
  getAllUserVaults,
  getVaultById,
  getVaultInfoById,
  getVaultInfoByIdAndTokenId,
  getVaultTransactionStatus,
  getSelfManagedVaultTransactionStatus,
  createVault,
  updateRoleEmail,
  finishSelfManagedVaultClaim,
  unwatchVault,
  watchAllVaults,
  getVaultKeys,
  createSelfManagedVault,
  signVaultTransaction,
  createInquiryId,
  updateApplicant,
  create,
  find,
  handleAlchemyWebhook,
  fileTicket,
  getTransactionItems,
  getTransactionItemById,
  getTransactionItemsByVirtualAccountId,
  testUpsert,
  getForexRates,
  getUserForexRates,
  fetchForexRates,
  check,
  test,
} from '../sdk.gen'

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const updateUserDetailsQueryKey = (options: Options<UpdateUserDetailsData>) => [createQueryKey('updateUserDetails', options)]

export const updateUserDetailsOptions = (options: Options<UpdateUserDetailsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updateUserDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: updateUserDetailsQueryKey(options),
  })
}

export const updateUserDetailsMutation = (options?: Partial<Options<UpdateUserDetailsData>>) => {
  const mutationOptions: UseMutationOptions<UpdateUserDetailsResponse, AxiosError<DefaultError>, Options<UpdateUserDetailsData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await updateUserDetails({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updatePrivyWalletAddressesQueryKey = (options: Options<UpdatePrivyWalletAddressesData>) => [
  createQueryKey('updatePrivyWalletAddresses', options),
]

export const updatePrivyWalletAddressesOptions = (options: Options<UpdatePrivyWalletAddressesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updatePrivyWalletAddresses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: updatePrivyWalletAddressesQueryKey(options),
  })
}

export const updatePrivyWalletAddressesMutation = (options?: Partial<Options<UpdatePrivyWalletAddressesData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdatePrivyWalletAddressesResponse,
    AxiosError<DefaultError>,
    Options<UpdatePrivyWalletAddressesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updatePrivyWalletAddresses({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const uploadAvatarQueryKey = (options: Options<UploadAvatarData>) => [createQueryKey('uploadAvatar', options)]

export const uploadAvatarOptions = (options: Options<UploadAvatarData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await uploadAvatar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: uploadAvatarQueryKey(options),
  })
}

export const uploadAvatarMutation = (options?: Partial<Options<UploadAvatarData>>) => {
  const mutationOptions: UseMutationOptions<UploadAvatarResponse, AxiosError<DefaultError>, Options<UploadAvatarData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await uploadAvatar({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const uploadAvatarFileQueryKey = (options: Options<UploadAvatarFileData>) => [createQueryKey('uploadAvatarFile', options)]

export const uploadAvatarFileOptions = (options: Options<UploadAvatarFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await uploadAvatarFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: uploadAvatarFileQueryKey(options),
  })
}

export const uploadAvatarFileMutation = (options?: Partial<Options<UploadAvatarFileData>>) => {
  const mutationOptions: UseMutationOptions<UploadAvatarFileResponse, AxiosError<DefaultError>, Options<UploadAvatarFileData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await uploadAvatarFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAvatarMutation = (options?: Partial<Options<DeleteAvatarData>>) => {
  const mutationOptions: UseMutationOptions<DeleteAvatarResponse, AxiosError<DefaultError>, Options<DeleteAvatarData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAvatar({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getMeQueryKey = (options?: Options<GetMeData>) => [createQueryKey('getMe', options)]

export const getMeOptions = (options?: Options<GetMeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getMeQueryKey(options),
  })
}

export const getAllFormsQueryKey = (options?: Options<GetAllFormsData>) => [createQueryKey('getAllForms', options)]

export const getAllFormsOptions = (options?: Options<GetAllFormsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllForms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllFormsQueryKey(options),
  })
}

export const requestTaxFormAccessQueryKey = (options: Options<RequestTaxFormAccessData>) => [
  createQueryKey('requestTaxFormAccess', options),
]

export const requestTaxFormAccessOptions = (options: Options<RequestTaxFormAccessData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await requestTaxFormAccess({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: requestTaxFormAccessQueryKey(options),
  })
}

export const requestTaxFormAccessMutation = (options?: Partial<Options<RequestTaxFormAccessData>>) => {
  const mutationOptions: UseMutationOptions<RequestTaxFormAccessResponse, AxiosError<DefaultError>, Options<RequestTaxFormAccessData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await requestTaxFormAccess({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const accessTaxFormQueryKey = (options: Options<AccessTaxFormData>) => [createQueryKey('accessTaxForm', options)]

export const accessTaxFormOptions = (options: Options<AccessTaxFormData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accessTaxForm({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: accessTaxFormQueryKey(options),
  })
}

export const accessTaxFormMutation = (options?: Partial<Options<AccessTaxFormData>>) => {
  const mutationOptions: UseMutationOptions<AccessTaxFormResponse, AxiosError<DefaultError>, Options<AccessTaxFormData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await accessTaxForm({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const taxFormDownloadedQueryKey = (options: Options<TaxFormDownloadedData>) => [createQueryKey('taxFormDownloaded', options)]

export const taxFormDownloadedOptions = (options: Options<TaxFormDownloadedData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await taxFormDownloaded({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: taxFormDownloadedQueryKey(options),
  })
}

export const taxFormDownloadedMutation = (options?: Partial<Options<TaxFormDownloadedData>>) => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<TaxFormDownloadedData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await taxFormDownloaded({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createTaxInfoQueryKey = (options: Options<CreateTaxInfoData>) => [createQueryKey('createTaxInfo', options)]

export const createTaxInfoOptions = (options: Options<CreateTaxInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createTaxInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createTaxInfoQueryKey(options),
  })
}

export const createTaxInfoMutation = (options?: Partial<Options<CreateTaxInfoData>>) => {
  const mutationOptions: UseMutationOptions<CreateTaxInfoResponse, AxiosError<DefaultError>, Options<CreateTaxInfoData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createTaxInfo({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getLatestVaultOwnerTaxInfoQueryKey = (options?: Options<GetLatestVaultOwnerTaxInfoData>) => [
  createQueryKey('getLatestVaultOwnerTaxInfo', options),
]

export const getLatestVaultOwnerTaxInfoOptions = (options?: Options<GetLatestVaultOwnerTaxInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLatestVaultOwnerTaxInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getLatestVaultOwnerTaxInfoQueryKey(options),
  })
}

export const processCreatorConfigQueryKey = (options: Options<ProcessCreatorConfigData>) => [
  createQueryKey('processCreatorConfig', options),
]

export const processCreatorConfigOptions = (options: Options<ProcessCreatorConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await processCreatorConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: processCreatorConfigQueryKey(options),
  })
}

export const processCreatorConfigMutation = (options?: Partial<Options<ProcessCreatorConfigData>>) => {
  const mutationOptions: UseMutationOptions<ProcessCreatorConfigResponse, AxiosError<DefaultError>, Options<ProcessCreatorConfigData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await processCreatorConfig({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createTransactionQueryKey = (options: Options<CreateTransactionData>) => [createQueryKey('createTransaction', options)]

export const createTransactionOptions = (options: Options<CreateTransactionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createTransaction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createTransactionQueryKey(options),
  })
}

export const createTransactionMutation = (options?: Partial<Options<CreateTransactionData>>) => {
  const mutationOptions: UseMutationOptions<CreateTransactionResponse, AxiosError<DefaultError>, Options<CreateTransactionData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createTransaction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCurrentUserWalletsQueryKey = (options?: Options<GetCurrentUserWalletsData>) => [
  createQueryKey('getCurrentUserWallets', options),
]

export const getCurrentUserWalletsOptions = (options?: Options<GetCurrentUserWalletsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentUserWallets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCurrentUserWalletsQueryKey(options),
  })
}

export const checkWalletQueryKey = (options: Options<CheckWalletData>) => [createQueryKey('checkWallet', options)]

export const checkWalletOptions = (options: Options<CheckWalletData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await checkWallet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: checkWalletQueryKey(options),
  })
}

export const checkWalletMutation = (options?: Partial<Options<CheckWalletData>>) => {
  const mutationOptions: UseMutationOptions<CheckWalletResponse, AxiosError<DefaultError>, Options<CheckWalletData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await checkWallet({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createWalletQueryKey = (options: Options<CreateWalletData>) => [createQueryKey('createWallet', options)]

export const createWalletOptions = (options: Options<CreateWalletData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createWallet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createWalletQueryKey(options),
  })
}

export const createWalletMutation = (options?: Partial<Options<CreateWalletData>>) => {
  const mutationOptions: UseMutationOptions<CreateWalletResponse, AxiosError<DefaultError>, Options<CreateWalletData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createWallet({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getTokenQueryKey = (options?: Options<GetTokenData>) => [createQueryKey('getToken', options)]

export const getTokenOptions = (options?: Options<GetTokenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getTokenQueryKey(options),
  })
}

export const addApplicantQueryKey = (options: Options<AddApplicantData>) => [createQueryKey('addApplicant', options)]

export const addApplicantOptions = (options: Options<AddApplicantData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await addApplicant({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addApplicantQueryKey(options),
  })
}

export const addApplicantMutation = (options?: Partial<Options<AddApplicantData>>) => {
  const mutationOptions: UseMutationOptions<AddApplicantResponse, AxiosError<DefaultError>, Options<AddApplicantData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await addApplicant({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createVaultsQueryKey = (options: Options<CreateVaultsData>) => [createQueryKey('createVaults', options)]

export const createVaultsOptions = (options: Options<CreateVaultsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createVaults({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createVaultsQueryKey(options),
  })
}

export const createVaultsMutation = (options?: Partial<Options<CreateVaultsData>>) => {
  const mutationOptions: UseMutationOptions<CreateVaultsResponse, AxiosError<DefaultError>, Options<CreateVaultsData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createVaults({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getVaultsCreationStatusQueryKey = (options: Options<GetVaultsCreationStatusData>) => [
  createQueryKey('getVaultsCreationStatus', options),
]

export const getVaultsCreationStatusOptions = (options: Options<GetVaultsCreationStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVaultsCreationStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVaultsCreationStatusQueryKey(options),
  })
}

export const getVaultsInfoQueryKey = (options: Options<GetVaultsInfoData>) => [createQueryKey('getVaultsInfo', options)]

export const getVaultsInfoOptions = (options: Options<GetVaultsInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVaultsInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVaultsInfoQueryKey(options),
  })
}

export const paymasterQueryKey = (options: Options<PaymasterData>) => [createQueryKey('paymaster', options)]

export const paymasterOptions = (options: Options<PaymasterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await paymaster({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: paymasterQueryKey(options),
  })
}

export const paymasterMutation = (options?: Partial<Options<PaymasterData>>) => {
  const mutationOptions: UseMutationOptions<PaymasterResponse, AxiosError<DefaultError>, Options<PaymasterData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await paymaster({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createFundingNoteQueryKey = (options: Options<CreateFundingNoteData>) => [createQueryKey('createFundingNote', options)]

export const createFundingNoteOptions = (options: Options<CreateFundingNoteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createFundingNote({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createFundingNoteQueryKey(options),
  })
}

export const createFundingNoteMutation = (options?: Partial<Options<CreateFundingNoteData>>) => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CreateFundingNoteData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createFundingNote({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createCustomQueryKey = (options: Options<CreateCustomData>) => [createQueryKey('createCustom', options)]

export const createCustomOptions = (options: Options<CreateCustomData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createCustom({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createCustomQueryKey(options),
  })
}

export const createCustomMutation = (options?: Partial<Options<CreateCustomData>>) => {
  const mutationOptions: UseMutationOptions<CreateCustomResponse, AxiosError<DefaultError>, Options<CreateCustomData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createCustom({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createBankingInfoQueryKey = (options: Options<CreateBankingInfoData>) => [createQueryKey('createBankingInfo', options)]

export const createBankingInfoOptions = (options: Options<CreateBankingInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createBankingInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createBankingInfoQueryKey(options),
  })
}

export const createBankingInfoMutation = (options?: Partial<Options<CreateBankingInfoData>>) => {
  const mutationOptions: UseMutationOptions<CreateBankingInfoResponse, AxiosError<DefaultError>, Options<CreateBankingInfoData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createBankingInfo({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const checkKycQueryKey = (options: Options<CheckKycData>) => [createQueryKey('checkKyc', options)]

export const checkKycOptions = (options: Options<CheckKycData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await checkKyc({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: checkKycQueryKey(options),
  })
}

export const checkKycMutation = (options?: Partial<Options<CheckKycData>>) => {
  const mutationOptions: UseMutationOptions<CheckKycResponse, AxiosError<DefaultError>, Options<CheckKycData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await checkKyc({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createLiquidationAddressQueryKey = (options: Options<CreateLiquidationAddressData>) => [
  createQueryKey('createLiquidationAddress', options),
]

export const createLiquidationAddressOptions = (options: Options<CreateLiquidationAddressData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createLiquidationAddress({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createLiquidationAddressQueryKey(options),
  })
}

export const createLiquidationAddressMutation = (options?: Partial<Options<CreateLiquidationAddressData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateLiquidationAddressResponse,
    AxiosError<DefaultError>,
    Options<CreateLiquidationAddressData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createLiquidationAddress({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getLiqAddressDrainHistoryQueryKey = (options: Options<GetLiqAddressDrainHistoryData>) => [
  createQueryKey('getLiqAddressDrainHistory', options),
]

export const getLiqAddressDrainHistoryOptions = (options: Options<GetLiqAddressDrainHistoryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLiqAddressDrainHistory({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getLiqAddressDrainHistoryQueryKey(options),
  })
}

export const getLiqAddressDrainHistoryMutation = (options?: Partial<Options<GetLiqAddressDrainHistoryData>>) => {
  const mutationOptions: UseMutationOptions<
    GetLiqAddressDrainHistoryResponse,
    AxiosError<DefaultError>,
    Options<GetLiqAddressDrainHistoryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await getLiqAddressDrainHistory({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getBankingInfoQueryKey = (options?: Options<GetBankingInfoData>) => [createQueryKey('getBankingInfo', options)]

export const getBankingInfoOptions = (options?: Options<GetBankingInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getBankingInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getBankingInfoQueryKey(options),
  })
}

export const getBankingInfoByIdQueryKey = (options: Options<GetBankingInfoByIdData>) => [createQueryKey('getBankingInfoById', options)]

export const getBankingInfoByIdOptions = (options: Options<GetBankingInfoByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getBankingInfoById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getBankingInfoByIdQueryKey(options),
  })
}

export const getLiquidationAddressByAuth0IdQueryKey = (options?: Options<GetLiquidationAddressByAuth0IdData>) => [
  createQueryKey('getLiquidationAddressByAuth0Id', options),
]

export const getLiquidationAddressByAuth0IdOptions = (options?: Options<GetLiquidationAddressByAuth0IdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLiquidationAddressByAuth0Id({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getLiquidationAddressByAuth0IdQueryKey(options),
  })
}

export const getLiquidationAddressByIdQueryKey = (options: Options<GetLiquidationAddressByIdData>) => [
  createQueryKey('getLiquidationAddressById', options),
]

export const getLiquidationAddressByIdOptions = (options: Options<GetLiquidationAddressByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLiquidationAddressById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getLiquidationAddressByIdQueryKey(options),
  })
}

export const getVirtualAccountsByAuth0IdQueryKey = (options?: Options<GetVirtualAccountsByAuth0IdData>) => [
  createQueryKey('getVirtualAccountsByAuth0Id', options),
]

export const getVirtualAccountsByAuth0IdOptions = (options?: Options<GetVirtualAccountsByAuth0IdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVirtualAccountsByAuth0Id({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVirtualAccountsByAuth0IdQueryKey(options),
  })
}

export const createVirtualAccountQueryKey = (options: Options<CreateVirtualAccountData>) => [
  createQueryKey('createVirtualAccount', options),
]

export const createVirtualAccountOptions = (options: Options<CreateVirtualAccountData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createVirtualAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createVirtualAccountQueryKey(options),
  })
}

export const createVirtualAccountMutation = (options?: Partial<Options<CreateVirtualAccountData>>) => {
  const mutationOptions: UseMutationOptions<CreateVirtualAccountResponse, AxiosError<DefaultError>, Options<CreateVirtualAccountData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createVirtualAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getUnifiedAccountsQueryKey = (options?: Options<GetUnifiedAccountsData>) => [createQueryKey('getUnifiedAccounts', options)]

export const getUnifiedAccountsOptions = (options?: Options<GetUnifiedAccountsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUnifiedAccounts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getUnifiedAccountsQueryKey(options),
  })
}

export const createUnifiedAccountQueryKey = (options: Options<CreateUnifiedAccountData>) => [
  createQueryKey('createUnifiedAccount', options),
]

export const createUnifiedAccountOptions = (options: Options<CreateUnifiedAccountData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUnifiedAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createUnifiedAccountQueryKey(options),
  })
}

export const createUnifiedAccountMutation = (options?: Partial<Options<CreateUnifiedAccountData>>) => {
  const mutationOptions: UseMutationOptions<CreateUnifiedAccountResponse, AxiosError<DefaultError>, Options<CreateUnifiedAccountData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createUnifiedAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getVirtualAccountByIdQueryKey = (options: Options<GetVirtualAccountByIdData>) => [
  createQueryKey('getVirtualAccountById', options),
]

export const getVirtualAccountByIdOptions = (options: Options<GetVirtualAccountByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVirtualAccountById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVirtualAccountByIdQueryKey(options),
  })
}

export const updateVirtualAccountQueryKey = (options: Options<UpdateVirtualAccountData>) => [
  createQueryKey('updateVirtualAccount', options),
]

export const updateVirtualAccountOptions = (options: Options<UpdateVirtualAccountData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updateVirtualAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: updateVirtualAccountQueryKey(options),
  })
}

export const updateVirtualAccountMutation = (options?: Partial<Options<UpdateVirtualAccountData>>) => {
  const mutationOptions: UseMutationOptions<UpdateVirtualAccountResponse, AxiosError<DefaultError>, Options<UpdateVirtualAccountData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await updateVirtualAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getVirtualAccountActvityQueryKey = (options: Options<GetVirtualAccountActvityData>) => [
  createQueryKey('getVirtualAccountActvity', options),
]

export const getVirtualAccountActvityOptions = (options: Options<GetVirtualAccountActvityData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVirtualAccountActvity({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVirtualAccountActvityQueryKey(options),
  })
}

export const getVirtualAccountActivityPaginatedQueryKey = (options: Options<GetVirtualAccountActivityPaginatedData>) => [
  createQueryKey('getVirtualAccountActivityPaginated', options),
]

export const getVirtualAccountActivityPaginatedOptions = (options: Options<GetVirtualAccountActivityPaginatedData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVirtualAccountActivityPaginated({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVirtualAccountActivityPaginatedQueryKey(options),
  })
}

export const getDirectRecipientsQueryKey = (options?: Options<GetDirectRecipientsData>) => [createQueryKey('getDirectRecipients', options)]

export const getDirectRecipientsOptions = (options?: Options<GetDirectRecipientsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDirectRecipients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getDirectRecipientsQueryKey(options),
  })
}

export const getDirectRecipientByIdQueryKey = (options: Options<GetDirectRecipientByIdData>) => [
  createQueryKey('getDirectRecipientById', options),
]

export const getDirectRecipientByIdOptions = (options: Options<GetDirectRecipientByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDirectRecipientById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getDirectRecipientByIdQueryKey(options),
  })
}

export const getAllUserVaultsQueryKey = (options?: Options<GetAllUserVaultsData>) => [createQueryKey('getAllUserVaults', options)]

export const getAllUserVaultsOptions = (options?: Options<GetAllUserVaultsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllUserVaults({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllUserVaultsQueryKey(options),
  })
}

export const getVaultByIdQueryKey = (options: Options<GetVaultByIdData>) => [createQueryKey('getVaultById', options)]

export const getVaultByIdOptions = (options: Options<GetVaultByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVaultById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVaultByIdQueryKey(options),
  })
}

export const getVaultInfoByIdQueryKey = (options: Options<GetVaultInfoByIdData>) => [createQueryKey('getVaultInfoById', options)]

export const getVaultInfoByIdOptions = (options: Options<GetVaultInfoByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVaultInfoById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVaultInfoByIdQueryKey(options),
  })
}

export const getVaultInfoByIdAndTokenIdQueryKey = (options: Options<GetVaultInfoByIdAndTokenIdData>) => [
  createQueryKey('getVaultInfoByIdAndTokenId', options),
]

export const getVaultInfoByIdAndTokenIdOptions = (options: Options<GetVaultInfoByIdAndTokenIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVaultInfoByIdAndTokenId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVaultInfoByIdAndTokenIdQueryKey(options),
  })
}

export const getVaultTransactionStatusQueryKey = (options: Options<GetVaultTransactionStatusData>) => [
  createQueryKey('getVaultTransactionStatus', options),
]

export const getVaultTransactionStatusOptions = (options: Options<GetVaultTransactionStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVaultTransactionStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVaultTransactionStatusQueryKey(options),
  })
}

export const getSelfManagedVaultTransactionStatusQueryKey = (options: Options<GetSelfManagedVaultTransactionStatusData>) => [
  createQueryKey('getSelfManagedVaultTransactionStatus', options),
]

export const getSelfManagedVaultTransactionStatusOptions = (options: Options<GetSelfManagedVaultTransactionStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSelfManagedVaultTransactionStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSelfManagedVaultTransactionStatusQueryKey(options),
  })
}

export const createVaultQueryKey = (options: Options<CreateVaultData>) => [createQueryKey('createVault', options)]

export const createVaultOptions = (options: Options<CreateVaultData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createVault({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createVaultQueryKey(options),
  })
}

export const createVaultMutation = (options?: Partial<Options<CreateVaultData>>) => {
  const mutationOptions: UseMutationOptions<CreateVaultResponse, AxiosError<DefaultError>, Options<CreateVaultData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createVault({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateRoleEmailQueryKey = (options: Options<UpdateRoleEmailData>) => [createQueryKey('updateRoleEmail', options)]

export const updateRoleEmailOptions = (options: Options<UpdateRoleEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updateRoleEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: updateRoleEmailQueryKey(options),
  })
}

export const updateRoleEmailMutation = (options?: Partial<Options<UpdateRoleEmailData>>) => {
  const mutationOptions: UseMutationOptions<UpdateRoleEmailResponse, AxiosError<DefaultError>, Options<UpdateRoleEmailData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await updateRoleEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const finishSelfManagedVaultClaimQueryKey = (options: Options<FinishSelfManagedVaultClaimData>) => [
  createQueryKey('finishSelfManagedVaultClaim', options),
]

export const finishSelfManagedVaultClaimOptions = (options: Options<FinishSelfManagedVaultClaimData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await finishSelfManagedVaultClaim({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: finishSelfManagedVaultClaimQueryKey(options),
  })
}

export const finishSelfManagedVaultClaimMutation = (options?: Partial<Options<FinishSelfManagedVaultClaimData>>) => {
  const mutationOptions: UseMutationOptions<
    FinishSelfManagedVaultClaimResponse,
    AxiosError<DefaultError>,
    Options<FinishSelfManagedVaultClaimData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await finishSelfManagedVaultClaim({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const unwatchVaultQueryKey = (options: Options<UnwatchVaultData>) => [createQueryKey('unwatchVault', options)]

export const unwatchVaultOptions = (options: Options<UnwatchVaultData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await unwatchVault({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: unwatchVaultQueryKey(options),
  })
}

export const unwatchVaultMutation = (options?: Partial<Options<UnwatchVaultData>>) => {
  const mutationOptions: UseMutationOptions<UnwatchVaultResponse, AxiosError<DefaultError>, Options<UnwatchVaultData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await unwatchVault({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const watchAllVaultsQueryKey = (options?: Options<WatchAllVaultsData>) => [createQueryKey('watchAllVaults', options)]

export const watchAllVaultsOptions = (options?: Options<WatchAllVaultsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await watchAllVaults({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: watchAllVaultsQueryKey(options),
  })
}

export const watchAllVaultsMutation = (options?: Partial<Options<WatchAllVaultsData>>) => {
  const mutationOptions: UseMutationOptions<WatchAllVaultsResponse, AxiosError<DefaultError>, Options<WatchAllVaultsData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await watchAllVaults({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getVaultKeysQueryKey = (options: Options<GetVaultKeysData>) => [createQueryKey('getVaultKeys', options)]

export const getVaultKeysOptions = (options: Options<GetVaultKeysData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVaultKeys({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getVaultKeysQueryKey(options),
  })
}

export const createSelfManagedVaultQueryKey = (options: Options<CreateSelfManagedVaultData>) => [
  createQueryKey('createSelfManagedVault', options),
]

export const createSelfManagedVaultOptions = (options: Options<CreateSelfManagedVaultData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createSelfManagedVault({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createSelfManagedVaultQueryKey(options),
  })
}

export const createSelfManagedVaultMutation = (options?: Partial<Options<CreateSelfManagedVaultData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateSelfManagedVaultResponse,
    AxiosError<DefaultError>,
    Options<CreateSelfManagedVaultData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createSelfManagedVault({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const signVaultTransactionQueryKey = (options: Options<SignVaultTransactionData>) => [
  createQueryKey('signVaultTransaction', options),
]

export const signVaultTransactionOptions = (options: Options<SignVaultTransactionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await signVaultTransaction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: signVaultTransactionQueryKey(options),
  })
}

export const signVaultTransactionMutation = (options?: Partial<Options<SignVaultTransactionData>>) => {
  const mutationOptions: UseMutationOptions<SignVaultTransactionResponse, AxiosError<DefaultError>, Options<SignVaultTransactionData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await signVaultTransaction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createInquiryIdQueryKey = (options?: Options<CreateInquiryIdData>) => [createQueryKey('createInquiryId', options)]

export const createInquiryIdOptions = (options?: Options<CreateInquiryIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createInquiryId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createInquiryIdQueryKey(options),
  })
}

export const createInquiryIdMutation = (options?: Partial<Options<CreateInquiryIdData>>) => {
  const mutationOptions: UseMutationOptions<CreateInquiryIdResponse, AxiosError<DefaultError>, Options<CreateInquiryIdData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createInquiryId({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateApplicantMutation = (options?: Partial<Options<UpdateApplicantData>>) => {
  const mutationOptions: UseMutationOptions<UpdateApplicantResponse, AxiosError<DefaultError>, Options<UpdateApplicantData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await updateApplicant({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createQueryKey2 = (options: Options<CreateData>) => [createQueryKey('create', options)]

export const createOptions = (options: Options<CreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await create({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createQueryKey2(options),
  })
}

export const createMutation = (options?: Partial<Options<CreateData>>) => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CreateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await create({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const findQueryKey = (options: Options<FindData>) => [createQueryKey('find', options)]

export const findOptions = (options: Options<FindData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await find({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: findQueryKey(options),
  })
}

export const handleAlchemyWebhookQueryKey = (options: Options<HandleAlchemyWebhookData>) => [
  createQueryKey('handleAlchemyWebhook', options),
]

export const handleAlchemyWebhookOptions = (options: Options<HandleAlchemyWebhookData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await handleAlchemyWebhook({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: handleAlchemyWebhookQueryKey(options),
  })
}

export const handleAlchemyWebhookMutation = (options?: Partial<Options<HandleAlchemyWebhookData>>) => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<HandleAlchemyWebhookData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await handleAlchemyWebhook({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const fileTicketQueryKey = (options: Options<FileTicketData>) => [createQueryKey('fileTicket', options)]

export const fileTicketOptions = (options: Options<FileTicketData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fileTicket({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: fileTicketQueryKey(options),
  })
}

export const fileTicketMutation = (options?: Partial<Options<FileTicketData>>) => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<FileTicketData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await fileTicket({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getTransactionItemsQueryKey = (options?: Options<GetTransactionItemsData>) => [createQueryKey('getTransactionItems', options)]

export const getTransactionItemsOptions = (options?: Options<GetTransactionItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTransactionItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getTransactionItemsQueryKey(options),
  })
}

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = queryKey[0]
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const getTransactionItemsInfiniteQueryKey = (
  options?: Options<GetTransactionItemsData>
): QueryKey<Options<GetTransactionItemsData>> => [createQueryKey('getTransactionItems', options, true)]

export const getTransactionItemsInfiniteOptions = (options?: Options<GetTransactionItemsData>) => {
  return infiniteQueryOptions<
    GetTransactionItemsResponse,
    AxiosError<DefaultError>,
    InfiniteData<GetTransactionItemsResponse>,
    QueryKey<Options<GetTransactionItemsData>>,
    string | Pick<QueryKey<Options<GetTransactionItemsData>>[0], 'body' | 'headers' | 'path' | 'query'>
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<GetTransactionItemsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  cursor: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await getTransactionItems({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getTransactionItemsInfiniteQueryKey(options),
    }
  )
}

export const getTransactionItemByIdQueryKey = (options: Options<GetTransactionItemByIdData>) => [
  createQueryKey('getTransactionItemById', options),
]

export const getTransactionItemByIdOptions = (options: Options<GetTransactionItemByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTransactionItemById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getTransactionItemByIdQueryKey(options),
  })
}

export const getTransactionItemsByVirtualAccountIdQueryKey = (options: Options<GetTransactionItemsByVirtualAccountIdData>) => [
  createQueryKey('getTransactionItemsByVirtualAccountId', options),
]

export const getTransactionItemsByVirtualAccountIdOptions = (options: Options<GetTransactionItemsByVirtualAccountIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTransactionItemsByVirtualAccountId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getTransactionItemsByVirtualAccountIdQueryKey(options),
  })
}

export const testUpsertQueryKey = (options?: Options<TestUpsertData>) => [createQueryKey('testUpsert', options)]

export const testUpsertOptions = (options?: Options<TestUpsertData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await testUpsert({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testUpsertQueryKey(options),
  })
}

export const testUpsertMutation = (options?: Partial<Options<TestUpsertData>>) => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<TestUpsertData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await testUpsert({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getForexRatesQueryKey = (options?: Options<GetForexRatesData>) => [createQueryKey('getForexRates', options)]

export const getForexRatesOptions = (options?: Options<GetForexRatesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getForexRates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getForexRatesQueryKey(options),
  })
}

export const getUserForexRatesQueryKey = (options?: Options<GetUserForexRatesData>) => [createQueryKey('getUserForexRates', options)]

export const getUserForexRatesOptions = (options?: Options<GetUserForexRatesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserForexRates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getUserForexRatesQueryKey(options),
  })
}

export const fetchForexRatesQueryKey = (options?: Options<FetchForexRatesData>) => [createQueryKey('fetchForexRates', options)]

export const fetchForexRatesOptions = (options?: Options<FetchForexRatesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fetchForexRates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: fetchForexRatesQueryKey(options),
  })
}

export const fetchForexRatesMutation = (options?: Partial<Options<FetchForexRatesData>>) => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<FetchForexRatesData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await fetchForexRates({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const checkQueryKey = (options?: Options<CheckData>) => [createQueryKey('check', options)]

export const checkOptions = (options?: Options<CheckData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await check({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: checkQueryKey(options),
  })
}

export const testQueryKey = (options?: Options<TestData>) => [createQueryKey('test', options)]

export const testOptions = (options?: Options<TestData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await test({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testQueryKey(options),
  })
}
