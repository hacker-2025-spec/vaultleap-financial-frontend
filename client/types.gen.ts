// This file is auto-generated by @hey-api/openapi-ts

export type UpdateUserDetailsDto = {
  name: string
  entityName?: string
  jurisdiction?: string
  registrationId?: string
  countryOfResidence?: string
}

export type CustomerEntity = {
  /**
   * The Auth0 ID associated with the user
   */
  auth0Id: string
  /**
   * Unique identifier for the customer record
   */
  id: string
  /**
   * The Bridge customer ID for the user
   */
  bridgeCustomerId: string
  /**
   * First name of the customer
   */
  first_name: string
  /**
   * Last name of the customer
   */
  last_name: string
  /**
   * Email address of the customer
   */
  email: string
  /**
   * The current status of the customer (e.g., active, suspended)
   */
  status: string
  /**
   * Type of customer, either individual or business
   */
  type: 'individual' | 'business'
  /**
   * List of future requirements that are due for the customer
   */
  future_requirements_due: Array<string>
  /**
   * List of current requirements that are due for the customer
   */
  requirements_due: Array<string>
  /**
   * Capabilities of the customer, represented as key-value pairs
   */
  capabilities: {
    [key: string]: string
  }
  /**
   * Type of Persona inquiry performed for the customer (e.g., identity verification)
   */
  persona_inquiry_type: string
  /**
   * Timestamp when the customer record was created
   */
  created_at: string
  /**
   * Timestamp when the customer record was last updated
   */
  updated_at: string
  /**
   * Reasons for rejection, if applicable
   */
  rejection_reasons: Array<string>
  /**
   * Whether the customer has accepted the terms of service
   */
  has_accepted_terms_of_service: boolean
  /**
   * Internal identifier for the signed TOS agreement that can be used for attestation
   */
  signed_agreement_id?: string
  /**
   * List of endorsements with the name and status of each endorsement
   */
  endorsements: Array<{
    [key: string]: unknown
  }>
}

export type BridgeKycEntity = {
  /**
   * The Auth0 ID associated with the user
   */
  auth0Id: string
  /**
   * Unique identifier for the KYC record
   */
  id: string
  /**
   * Unique identifier from Bridge for the KYC process
   */
  bridgeKycId: string
  /**
   * Full name of the user undergoing KYC
   */
  full_name: string
  /**
   * Email address of the user
   */
  email: string
  /**
   * Type of KYC process (e.g., individual, business)
   */
  type: string
  /**
   * Link to the KYC document or verification page
   */
  kyc_link: string
  /**
   * Link to the Terms of Service document
   */
  tos_link: string
  /**
   * Status of the KYC process (e.g., pending, approved)
   */
  kyc_status: string
  /**
   * Status of the Terms of Service agreement (e.g., accepted, not accepted)
   */
  tos_status: string
  /**
   * Timestamp when the KYC record was created
   */
  created_at: string
  /**
   * Customer ID linked to the user in your system
   */
  customer_id: string
  /**
   * Type of Persona inquiry used (e.g., identity, verification)
   */
  persona_inquiry_type: string
}

export type UserResponseDto = {
  auth0Id: string
  email: string
  name: string
  isPremium: boolean
  avatar?: string
  avatarS3Key?: string
  customer?: CustomerEntity
  bridgeKyc?: BridgeKycEntity
  countryOfResidence?: string
  privyWalletAddress?: string
  privySmartWalletAddress?: string
}

export type UpdatePrivyWalletAddressesDto = {
  /**
   * Privy wallet address (EOA wallet)
   */
  privyWalletAddress: string
  /**
   * Privy smart wallet address (smart contract wallet)
   */
  privySmartWalletAddress: string
}

export type UpdateUserAvatarDto = {
  avatar: string
}

export type TaxUserType = 'payer' | 'recipient'

export type TaxFormVaultInfoDto = {
  id: string
  vaultId: string
  s3Key: string
  shareHolderRoleAddress: string
  formType: string
  userType?: TaxUserType
  taxYear: number
  projectName: string
}

export type RequestTaxFormAccessResponseDto = {
  status: string
}

export type AccessTaxFormDto = {
  securityCode: string
}

export type AccessTaxFormResponseDto = {
  s3Key: string
  downloadUrl: string
}

export type TaxFormType = '1099' | 'W9' | 'W8_BEN' | 'W8_BEN_E'

export type TaxInfo1099FormDto = {
  businessName: string
  address: string
  city: string
  state: string
  country: string
  zip: string
  ssn?: string
  ein?: string
}

export type FedTaxClassification =
  | 'C Corporation'
  | 'S Corporation'
  | 'Partnership'
  | 'Trust / Estate'
  | 'Individual / Sole Proprietor or single-member LLC'
  | 'LLC'
  | 'other'

export type TaxInfoW9FormDto = {
  fullName: string
  businessName?: string
  fedTaxClassification: FedTaxClassification
  llcClassification?: string
  otherClassification?: string
  payeeCode?: string
  exemptionCode?: string
  address: string
  city: string
  state: string
  country: string
  zip: string
  ssn?: string
  ein?: string
  readAndUnderstand: boolean
  signature: string
  date: string
  consent: boolean
}

export type TaxInfoW8BenFormDto = {
  ownerName: string
  citizenshipCountry: string
  address: string
  city: string
  country: string
  mailingAddress?: string
  mailingCity?: string
  mailingCountry?: string
  usTaxId?: string
  foreignTaxId?: string
  ftinNotRequired: boolean
  referenceNumbers?: string
  dateOfBirth: string
  countryOfTaxTreaty?: string
  treatyArticle?: string
  paragraph?: string
  withholdingRate?: string
  typeOfIncome?: string
  additionalConditions?: string
  certify: boolean
  readAndUnderstand: boolean
  signature: string
  signerName: string
  date: string
  consent: boolean
}

export type IdentificationStatus =
  | 'Simple Trust'
  | 'Private Foundation'
  | 'Complex Trust'
  | 'Central Bank of Issue'
  | 'Partnership'
  | 'Estate'
  | 'Grantor Trust'
  | 'Disregarded Entity'
  | 'International Organization'
  | 'Tax-exempt Organization'
  | 'Corporation'
  | 'Foreign Government - Controlled Entity'
  | 'Foreign Government - Integral Part'

export type FatcaStatus =
  | 'Participating FFI'
  | 'Reporting Model 1 FFI'
  | 'Reporting Model 2 FFI'
  | 'Sponsored FFI (Complete Part IV)'
  | 'Certified deemed-compliant nonregistering local bank (Complete Part V)'
  | 'Certified deemed-compliant FFI with only low-value accounts (Complete Part VI)'
  | 'Certified deemed-compliant sponsored, closely held investment vehicle (Complete Part VII)'
  | 'Certified deemed-compliant limited life debt investment entity (Complete Part VIII)'
  | 'Certain investment entities that donâ€™t maintain financial accounts (Complete Part IX)'
  | 'Owner-documented FFI (Complete Part X)'
  | 'Restricted distributor (Complete Part XI)'
  | 'Nonreporting IGA FFI (Complete Part XII)'
  | 'Foreign government, government of a U.S. possession, or foreign central bank of issue (Complete Part XIII)'
  | 'International organization (Complete Part XIV)'
  | 'Exempt retirement plans (Complete Part XV)'
  | 'Entity wholly owned by exempt beneficial owners (Complete Part XVI)'
  | 'Territory financial institution (Complete Part XVII)'
  | 'Excepted nonfinancial group entity (Complete Part XVIII)'
  | 'Excepted nonfinancial start-up company (Complete Part XIX)'
  | 'Excepted nonfinancial entity in liquidation or bankruptcy (Complete Part XX)'
  | '501(c) organization (Complete Part XXI)'
  | 'Nonprofit organization (Complete Part XXII)'
  | 'Publicly traded NFFE or NFFE affiliate of a publicly traded corporation (Complete Part XXIII)'
  | 'Excepted territory NFFE (Complete Part XXIV)'
  | 'Active NFFE (Complete Part XXV)'
  | 'Passive NFFE (Complete Part XXVI)'
  | 'Excepted inter-affiliate FFI (Complete Part XXVII)'
  | 'Direct reporting NFFE'
  | 'Sponsored direct reporting NFFE (Complete Part XXVIII)'
  | 'Account that is not a financial account'
  | 'Nonparticipating FFI (including an FFI related to a Reporting IGA FFI other than a deemed-compliant FFI, participating FFI, or exempt beneficial owner)'
  | 'Registered deemed-compliant FFI (other than a reporting Model 1 FFI, sponsored FFI, or nonreporting IGA FFI covered in Part XII)'

export type EntityFatcaStatus =
  | 'Branch treated as nonparticipating FFI'
  | 'Reporting Model 1 FFI'
  | 'U.S. Branch'
  | 'Participating FFI'
  | 'Reporting Model 2 FFI'

export type TaxTreatyBenefits =
  | 'Government'
  | 'Tax-exempt pension trust or pension fund'
  | 'Other tax-exempt organization'
  | 'Publicly traded corporation'
  | 'Subsidiary of a publicly traded corporation'
  | 'Company that meets the ownership and base erosion test'
  | 'Company that meets the derivative benefits test'
  | 'Company with an item of income that meets active trade or business test'
  | 'Favorable discretionary determination by the U.S. competent authority received'
  | 'No LOB article in treaty'
  | 'Other (specify Article and paragraph):'

export type SponsoredFiiCertify = '1' | '2'

export type TrusteeCountry = 'U.S' | 'FOREIGN'

export type TaxInfoW8BenEFormDto = {
  organizationName: string
  countryOfIncorporation: string
  disregardedEntityName?: string
  status: IdentificationStatus
  isTreatyClaim?: boolean
  fatcaStatus: FatcaStatus
  permanentResidenceAddress: string
  permanentResidenceCity: string
  permanentResidenceCountry: string
  mailingAddress?: string
  mailingCity?: string
  mailingCountry?: string
  usTaxId?: string
  giin?: string
  foreignTaxId?: string
  ftinNotRequired?: boolean
  referenceNumbers?: string
  entityFatcaStatus?: EntityFatcaStatus
  entityAddress?: string
  entityCity?: string
  entityCountry?: string
  entityGiin?: string
  certificateTaxTreatyA?: boolean
  certificateTaxTreatyACountry?: string
  certificateTaxTreatyB?: boolean
  certificateTaxTreatyBBenefit?: TaxTreatyBenefits
  certificateTaxTreatyBOther?: string
  certificateTaxTreatyC?: boolean
  ratesTreatyArticle?: string
  ratesParagraph?: string
  ratesWithholdingRate?: string
  ratesTypeOfIncome?: string
  ratesAdditionalConditions?: string
  sponsoringEntityName?: string
  sponsoringEntityCertify?: SponsoredFiiCertify
  certify18?: boolean
  certify19?: boolean
  sponsoringEntityNamePartVII?: string
  certify21?: boolean
  certify22?: boolean
  certify23?: boolean
  certify24A?: boolean
  certify24B?: boolean
  certify24C?: boolean
  certify24D?: boolean
  certify25A?: boolean
  certify25B?: boolean
  certify25C?: boolean
  certify26?: boolean
  country26?: string
  institutionType26?: string
  model1Iga26?: boolean
  model2Iga26?: boolean
  trusteeName26?: string
  trusteeCountry26?: TrusteeCountry
  certify27?: boolean
  certify28A?: boolean
  certify28B?: boolean
  certify29A?: boolean
  certify29B?: boolean
  certify29C?: boolean
  certify29D?: boolean
  certify29E?: boolean
  certify29F?: boolean
  certify30?: boolean
  certify31?: boolean
  certify32?: boolean
  certify33?: boolean
  date33?: string
  certify34?: boolean
  date34?: string
  certify35?: boolean
  date35?: string
  certify36?: boolean
  certify37A?: boolean
  exchange37A?: string
  certify37B?: boolean
  name37B?: string
  securities37B?: string
  certify38?: boolean
  certify39?: boolean
  certify40A?: boolean
  certify40B?: boolean
  certify40C?: boolean
  certify41?: boolean
  name42?: string
  certify43?: boolean
  name1Part44?: string
  address1Part44?: string
  tin1Part44?: string
  name2Part44?: string
  address2Part44?: string
  tin2Part44?: string
  name3Part44?: string
  address3Part44?: string
  tin3Part44?: string
  name4Part44?: string
  address4Part44?: string
  tin4Part44?: string
  name5Part44?: string
  address5Part44?: string
  tin5Part44?: string
  name6Part44?: string
  address6Part44?: string
  tin6Part44?: string
  name7Part44?: string
  address7Part44?: string
  tin7Part44?: string
  name8Part44?: string
  address8Part44?: string
  tin8Part44?: string
  name9Part44?: string
  address9Part44?: string
  tin9Part44?: string
  certify: boolean
  signature: string
  signerName: string
  date: string
  consent: boolean
}

export type TaxInfoCreationDto = {
  vaultId: string
  email: string
  formType: TaxFormType
  shareHolderRoleAddress?: string
  t1099FormDetails?: TaxInfo1099FormDto
  w9FormDetails?: TaxInfoW9FormDto
  w8BenFormDetails?: TaxInfoW8BenFormDto
  w8BenEFormDetails?: TaxInfoW8BenEFormDto
}

export type TaxInfoDto = {
  vaultId: string
  email: string
  formType: TaxFormType
  shareHolderRoleAddress?: string
  t1099FormDetails?: TaxInfo1099FormDto
  w9FormDetails?: TaxInfoW9FormDto
  w8BenFormDetails?: TaxInfoW8BenFormDto
  w8BenEFormDetails?: TaxInfoW8BenEFormDto
  id: string
  auth0Id: string
}

export type TShareRoleDto = {
  name: string
  sharePercentage: number
  emails: Array<string>
  count: number
  shareHolderRoleAddress?: string
  totalIncome?: string
  watching?: boolean
  taxInfoProvided?: boolean
}

export type TransactionStatus = 'created' | 'submitted' | 'successful' | 'rejected'

export type VaultDto = {
  userId: string
  projectName: string
  roles: Array<TShareRoleDto>
  profitSwitchName?: string
  profitSwitchAmount?: number
  profitSwitchAddress?: string
  ownerName: string
  ownerEmail: string
  adminWalletAddress: string
  vaultFeePercentage: number
  taxFormEnabled?: boolean
  agreeToTOSAndPP: boolean
  id: string
  vaultAddress?: string
  watching: boolean
  currentFunds?: string
  totalPaid?: string
  alreadyClaimed?: boolean
  tokenAddress?: string
  tokenId?: string
  walletAddress?: string
  claimable?: string
  shareholderManagerAddress: string
  transactionHash?: string
  transactionStatus?: TransactionStatus
  selfManaged?: boolean
}

export type VaultWithTaxInfoDto = {
  vaultInfo: VaultDto
  taxInfo?: TaxInfoDto
}

export type AdminDetailsDto = {
  walletAddress: string
}

export type TransactionType = 'claim_vault_keys' | 'send_nfts' | 'send_usdc' | 'claim_usdc' | 'reclaim_vault_keys'

export type SendEvmTransactionDto = {
  transactionType: TransactionType
  to: string
  data: string
}

export type WalletType = 'metamask' | 'coinbase' | 'coinbase-smart-wallet' | 'wallet-connect'

export type WalletDto = {
  address: string
  auth0Id: string
  createdAt: Date
  walletType: WalletType
}

export type WalletCreationDto = {
  address: string
  walletType: string
}

export type WalletStatus = 'WALLET_BELONGS_TO_SOMEONE_ELSE' | 'WALLET_ALREADY_ADDED' | 'WALLET_NOT_ASSIGNED'

export type WalletStatusDto = {
  status: WalletStatus
}

export type SumSubTokenResponseDto = {
  token: string
  userId: string
}

export type ReviewStatus = 'pending' | 'completed'

export type SumSubApplicantDetailDto = {
  applicantId: string
  applicantStatus?: ReviewStatus
}

export type SumSubApplicantResponseDto = {
  applicantId: string
  auth0Id: string
  applicantStatus?: ReviewStatus
}

export type CreatorVaultDto = {
  userId: string
  projectName: string
  roles: Array<TShareRoleDto>
  profitSwitchName?: string
  profitSwitchAmount?: number
  profitSwitchAddress?: string
  ownerName: string
  ownerEmail: string
  adminWalletAddress: string
  vaultFeePercentage: number
  taxFormEnabled?: boolean
  agreeToTOSAndPP: boolean
  id?: string
  vaultAddress?: string
  watching?: boolean
  walletAddress?: string
  shareholderManagerAddress?: string
  transactionHash?: string
  transactionStatus?: TransactionStatus
}

export type TaxInfoVaultsConfigDto = {
  email: string
  formType: TaxFormType
  t1099FormDetails: TaxInfo1099FormDto
}

export type VaultsCreatorConfigDto = {
  vaults: Array<CreatorVaultDto>
  taxFormEnabled: boolean
  ownerTaxInfo?: TaxInfoVaultsConfigDto
}

export type VaultsCreationStatus = 'created' | 'processing' | 'success' | 'rejected'

export type VaultsCreatorDto = {
  id: string
  auth0Id: string
  vaults: Array<CreatorVaultDto>
  creationStatus: VaultsCreationStatus
}

export type VaultsCreationStatusDto = {
  status: VaultsCreationStatus
}

export type PaymasterServiceRequestDto = {
  jsonrpc: string
  id: number
  method: string
  params: Array<string>
}

export type PaymasterServiceResponseDto = {
  [key: string]: unknown
}

export type CreateFundingNoteDto = {
  [key: string]: unknown
}

export type CreateCustomerFromKycDto = {
  full_name: string
  email: string
  type: string
}

export type CreateCustomerDto = {
  /**
   * Customer details from KYC
   */
  customer: CreateCustomerFromKycDto
  /**
   * Privy wallet address (EOA wallet)
   */
  privyWalletAddress: string
  /**
   * Privy smart wallet address (smart contract wallet)
   */
  privySmartWalletAddress: string
  /**
   * Indicates that the user has accepted the terms of service in your application
   */
  tosAccepted: boolean
  /**
   * Internal identifier for the signed TOS agreement that can be used for attestation
   */
  signedAgreementId?: string
  /**
   * Indicates that the developer has accepted the terms of service on behalf of the user
   */
  developer_accepted_tos: boolean
}

export type _Function = {
  [key: string]: unknown
}

export type CreateBankingInfoDto = {
  /**
   * Bridge customer ID
   */
  bridgeCustomerId: string
  /**
   * Banking information
   */
  bankingInfo: _Function
}

export type BankingInfoEntity = {
  /**
   * The Auth0 ID associated with the user
   */
  auth0Id: string
  /**
   * Unique identifier for the banking information record
   */
  id: string
  /**
   * Type of bank account (e.g., checking, savings)
   */
  account_type: string
  /**
   * Currency associated with the account (e.g., USD, EUR)
   */
  currency: string
  /**
   * Customer ID linked to the user in your system
   */
  customer_id: string
  /**
   * Full name of the account owner
   */
  account_owner_name: string
  /**
   * Individual or Bussiness
   */
  account_owner_type: string
  /**
   * First anme
   */
  first_name: string
  /**
   * Last name
   */
  last_name: string
  /**
   * business name
   */
  business_name: string
  /**
   * Name of the bank where the account is held
   */
  bank_name: string
  /**
   * Last 4 digits of the account number
   */
  last_4: string
  /**
   * Whether the account is active or not
   */
  active: boolean
  /**
   * Indicates whether the beneficiary address is valid
   */
  beneficiary_address_valid: boolean
  /**
   * Account details including last 4 digits, routing number, and account type
   */
  account: {
    last_4?: string
    routing_number?: string
    checking_or_savings?: string
  }
  /**
   * Iban account details including last 4 digits
   */
  iban: {
    last_4?: string
    bic?: string
    country?: string
  }
  /**
   * Timestamp when the banking information was created
   */
  created_at: string
  /**
   * Timestamp when the banking information was last updated
   */
  updated_at: string
}

export type CheckKycStatusDto = {
  /**
   * Bridge.xyz`s KYC Link Identifier
   */
  bridgeKYCId: string
}

export type CreateCustomerFromKycResponseDto = {
  id: string
  full_name: string
  email: string
  type: string
  kyc_link: string
  tos_link: string
  kyc_status: string
  rejection_reasons: Array<string>
  tos_status: string
  created_at: string
  customer_id: string
  persona_inquiry_type: string
  virtualAccountsCreated?: boolean
}

export type CreateLiquidationAddressShortDto = {
  /**
   * Percent of the fee
   */
  percentage: string
  /**
   * Bridge external account Id, from bankin-info entity
   */
  bridgeExternalAccountId: string
  vaultName: string
}

export type LiquidationAddressEntity = {
  /**
   * The Auth0 ID associated with the user
   */
  auth0Id: string
  /**
   * Unique identifier for the liquidation address record
   */
  id: string
  /**
   * The Bridge liquidation address ID associated with the user
   */
  bridgeLiquidationAddressId: string
  /**
   * The blockchain chain associated with the liquidation address (e.g., Ethereum, Bitcoin)
   */
  chain: string
  /**
   * The state or status of the liquidation address
   */
  state: string
  /**
   * The address associated with the liquidation
   */
  address: string
  /**
   * The currency used for the liquidation (e.g., USD, EUR, BTC)
   */
  currency: string
  /**
   * Timestamp when the liquidation address record was created
   */
  created_at: string
  /**
   * Timestamp when the liquidation address record was last updated
   */
  updated_at: string
  /**
   * Developer fee details associated with the liquidation address
   */
  developer_fee: {
    percent?: string
  }
  /**
   * External account ID related to the liquidation address
   */
  external_account_id: string
  /**
   * Currency to be received at the destination address
   */
  destination_currency: string
  /**
   * Payment rail used for the destination transaction (e.g., SWIFT, PayPal)
   */
  destination_payment_rail: string
  /**
   * Custom developer fee percentage for the liquidation process
   */
  custom_developer_fee_percent: string
  /**
   * Vault name
   */
  vault_name: string
}

export type GetLiqAddressDrainHistoryDto = {
  liqAddressId: string
}

export type GetLiqAddressDrainHistoryResponseDto = {
  [key: string]: unknown
}

export type VirtualAccountDestinationDto = {
  /**
   * The payment rail used for the transaction.
   */
  payment_rail: string
  /**
   * The currency of the destination.
   */
  currency: 'usdc'
  /**
   * The crypto wallet address that the customer wishes to receive funds at.
   */
  address: string
}

export type VirtualAccountEntity = {
  /**
   * The Auth0 ID associated with the user
   */
  auth0Id: string
  /**
   * Unique identifier for the liquidation address record
   */
  id: string
  /**
   * Status of the virtual account.
   */
  status: string
  /**
   * Customer identifier.
   */
  customer_id: string
  /**
   * Banking information
   */
  source_deposit_instructions: _Function
  /**
   * Destination details for the transaction.
   */
  destination: VirtualAccountDestinationDto
  /**
   * Developer fee percentage.
   */
  developer_fee_percent: string
  /**
   * Custom name of the virtual account. (vault)
   */
  vault_name: string
}

export type CreateUnifiedAccountDto = {
  /**
   * Name for the vault/account
   */
  vaultName: string
  /**
   * Transfer type - bridge for traditional Bridge flow, direct_web3 for direct Web3 transfers
   */
  transferType: 'bridge' | 'direct_web3'
  /**
   * Developer fee percentage
   */
  feePercentage?: string
  /**
   * Blockchain chain
   */
  chain: 'base'
  /**
   * Currency type
   */
  currency: 'usdc' | 'usdt' | 'eurc'
  /**
   * Payment rail for destination
   */
  destinationPaymentRail: 'ach' | 'wire' | 'sepa' | 'base'
  /**
   * Destination currency
   */
  destinationCurrency: 'usd' | 'eur' | 'usdc' | 'usdt' | 'eurc'
  /**
   * Destination address for crypto payments (required for direct Web3 transfers)
   */
  destinationAddress?: string
  /**
   * Banking information (required for fiat destinations)
   */
  bankingInfo?: _Function
  /**
   * Wire message for wire transfers
   */
  destinationWireMessage?: string
  /**
   * SEPA reference for SEPA transfers
   */
  destinationSepaReference?: string
}

export type VirtualAccountSourceDto = {
  /**
   * The source currency.
   */
  currency: 'usd' | 'eur'
}

export type CreateBridgeVirtualAccountDto = {
  /**
   * Source details including the currency type.
   */
  source: VirtualAccountSourceDto
  /**
   * Destination details for the transaction.
   */
  destination: VirtualAccountDestinationDto
  /**
   * Developer fee percentage.
   */
  developer_fee_percent: string
}

export type CreateVirtualAccountDto = {
  /**
   * Bridge customer ID
   */
  bridgeCustomerId: string
  /**
   * virtual account information
   */
  virtualAccountData: CreateBridgeVirtualAccountDto
  vaultName: string
}

export type VirtualAccountActivityItemSourceDetailsDto = {
  /**
   * The payment rail used for the transaction.
   */
  payment_rail: string
  /**
   * Description of the transaction.
   */
  description: string
  /**
   * The name of the sender.
   */
  sender_name: string
  /**
   * The routing number of the sender bank.
   */
  sender_bank_routing_number: string
  /**
   * A unique 15-digit trace number used for tracking.
   */
  trace_number: string
}

export type VirtualAccountActivityItem = {
  /**
   * Unique event identifier.
   */
  id: string
  /**
   * Customer identifier.
   */
  customer_id: string
  /**
   * Virtual account identifier.
   */
  virtual_account_id: string
  /**
   * Event type.
   */
  type: string
  /**
   * Transaction amount.
   */
  amount: string
  /**
   * Transaction currency.
   */
  currency: string
  /**
   * Developer fee amount.
   */
  developer_fee_amount: string
  /**
   * Exchange fee amount.
   */
  exchange_fee_amount: string
  /**
   * Subtotal amount.
   */
  subtotal_amount: string
  /**
   * Gas fee amount.
   */
  gas_fee: string
  /**
   * Deposit identifier.
   */
  deposit_id: string
  /**
   * Timestamp when the event was created.
   */
  created_at: string
  /**
   * Source details of the transaction.
   */
  source: VirtualAccountActivityItemSourceDetailsDto
}

export type DirectRecipientEntity = {
  /**
   * User Auth0 ID
   */
  auth0Id: string
  /**
   * Unique recipient ID
   */
  id: string
  /**
   * Vault name
   */
  vaultName: string
  /**
   * Destination Ethereum address
   */
  destinationAddress: string
  /**
   * Blockchain chain (always base for now)
   */
  chain: string
  /**
   * Currency (always usdc for now)
   */
  currency: string
  /**
   * Developer fee percentage
   */
  feePercentage?: string
  /**
   * Creation timestamp
   */
  createdAt: Date
  /**
   * Last update timestamp
   */
  updatedAt: Date
}

export type TVaultFundsStatisticDto = {
  amount: string
  date: string
}

export type VaultInfoDto = {
  userId: string
  projectName: string
  roles: Array<TShareRoleDto>
  profitSwitchName?: string
  profitSwitchAmount?: number
  profitSwitchAddress?: string
  ownerName: string
  ownerEmail: string
  adminWalletAddress: string
  vaultFeePercentage: number
  taxFormEnabled?: boolean
  agreeToTOSAndPP: boolean
  id: string
  vaultAddress?: string
  watching: boolean
  currentFunds?: string
  totalPaid?: string
  alreadyClaimed?: boolean
  tokenAddress?: string
  tokenId?: string
  walletAddress?: string
  claimable?: string
  shareholderManagerAddress: string
  transactionHash?: string
  transactionStatus?: TransactionStatus
  selfManaged?: boolean
  vaultFundsStatistics: Array<TVaultFundsStatisticDto>
}

export type VaultTransactionStatusDto = {
  status: TransactionStatus
}

export type SelfManagedVaultTransactionStatusDto = {
  status: TransactionStatus
  info?: {
    a?: string
    p?: string
  }
}

export type VaultCreationDto = {
  userId: string
  projectName: string
  roles: Array<TShareRoleDto>
  profitSwitchName?: string
  profitSwitchAmount?: number
  profitSwitchAddress?: string
  ownerName: string
  ownerEmail: string
  adminWalletAddress: string
  vaultFeePercentage: number
  taxFormEnabled?: boolean
  agreeToTOSAndPP: boolean
  businessName?: string
  address?: string
  city?: string
  state?: string
  country?: string
  zip?: string
  tinSsn?: string
}

export type UpdateRoleEmailDto = {
  tokenAddress: string
}

export type VaultKeysDto = {
  id: string
  projectName: string
  roles: Array<TShareRoleDto>
  vaultFeePercentage: number
  vaultAddress?: string
  amount: number
  tokenAddress: string
  tokenId: string
  walletAddress: string
  claimable: string
}

export type SignVaultTransactionDto = {
  vaultId: string
  p: string
  address: string
}

export type SignVaultTransactionResultDto = {
  signature?: string
}

export type PersonaInquiryIdResponseDto = {
  inquiryId: string
}

export type PersonaReviewStatus = 'pending' | 'completed'

export type PersonaApplicantDetailDto = {
  applicantStatus: PersonaReviewStatus
}

export type PersonaApplicantResponseDto = {
  id: string
  auth0Id: string
  applicantStatus: PersonaReviewStatus
}

export type CreateAddressActivityDto = {
  /**
   * Unique ID of the webhook destination.
   */
  webhookId: string
  /**
   * ID of the event.
   */
  id: string
  /**
   * Timestamp when the webhook was created.
   */
  createdAt: string
  /**
   * Webhook event type.
   */
  type: string
  /**
   * Mined transaction object.
   */
  event: {
    [key: string]: unknown
  }
}

export type CreateSupportTicketDto = {
  name: string
  email: string
  subject: string
  message: string
}

export enum TransactionItemType {
  // bank accounts funds status
  FUNDS_SCHEDULED = 'funds_scheduled',
  FUNDS_RECEIVED = 'funds_received',

  // on-chain status
  PAYMENT_SUBMITTED = 'payment_submitted',
  PAYMENT_RECEIVED = 'payment_received',
  PAYMENT_SENT = 'payment_sent',

  IN_REVIEW = 'in_review',
  REFUND = 'refund',
}

export type TransactionItemResponseDto = {
  /**
   * Globally unique ID for the transaction item
   */
  id: string
  /**
   * Source of the transaction
   */
  source: 'alchemy' | 'bridge' | 'manual'
  /**
   * ID from the originating system
   */
  sourceEventId: string
  customerId: string
  virtualAccountId: string
  type: TransactionItemType
  /**
   * Amount in decimal
   */
  amount: number
  currency: string
  /**
   * Developer fee amount
   */
  developerFeeAmount: number
  /**
   * Exchange fee amount
   */
  exchangeFeeAmount: number
  /**
   * Deposit ID
   */
  depositId: string
  /**
   * Transaction description
   */
  description: string
  /**
   * Name of the sender
   */
  senderName: string
  /**
   * Trace number or IMAD
   */
  traceNumber: string
  /**
   * From Address
   */
  fromAddress: string
  /**
   * To Address
   */
  toAddress: string
  /**
   * Hash of the transaction
   */
  hash: string
  /**
   * Network of the transaction
   */
  network: string
  senderUser: {
    [key: string]: unknown
  }
  receiverUser: {
    [key: string]: unknown
  }
  /**
   * Transaction date
   */
  occurredAt: number
  createdAt: Date
  updatedAt: Date
}

export type GetTransactionItemsResponseDto = {
  /**
   * List of paginated transaction items for the current page
   */
  items: Array<TransactionItemResponseDto>
  /**
   * Number of items returned in this page
   */
  limit: number
  /**
   * Number of items returned in this page
   */
  count: number
  /**
   * Base64-encoded cursor for fetching the next page. Pass this as `cursor` in the next request.
   */
  nextCursor?: {
    [key: string]: unknown
  }
}

export type CurrencyRateDto = {
  /**
   * Rate in USD
   */
  usd: number
  /**
   * Rate in EUR
   */
  eur: number
}

export type ForexRatesResponseDto = {
  /**
   * USDT rates
   */
  usdt: CurrencyRateDto
  /**
   * USDC rates
   */
  usdc: CurrencyRateDto
  /**
   * EURC rates
   */
  eurc: CurrencyRateDto
  /**
   * Timestamp when rates were last updated
   */
  lastUpdated: number
}

export type UsBankAccount = {
  /**
   * Account number
   */
  account_number: string
  /**
   * Routing number
   */
  routing_number: string
}

export type Address = {
  /**
   * Street address line 1
   */
  street_line_1: string
  /**
   * Street address line 2
   */
  street_line_2: string
  /**
   * City
   */
  city: string
  /**
   * State
   */
  state?: string
  /**
   * Postal code
   */
  postal_code: string
  /**
   * Country code
   */
  country: string
}

export type CreateUsExternalAccountDto = {
  /**
   * Us bank account details
   */
  account: UsBankAccount
  /**
   * Currency
   */
  currency: 'usd'
  /**
   * Account owner name
   */
  account_owner_name: string
  /**
   * Bank name
   */
  bank_name: string
  /**
   * Billing address
   */
  address: Address
}

export type Iban = {
  /**
   * The International Bank Account Number (IBAN) that will be used to send the funds
   */
  account_number: string
  /**
   * The Bank Identifier Code (BIC) that will be used to send the funds
   */
  bic: string
  /**
   * Country in which the bank account is located. It`s a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.
   */
  country: string
}

export type CreateIbanExternalAccountDto = {
  /**
   * Us bank account details
   */
  iban: Iban
  /**
   * Type of the bank accoun
   */
  account_type: 'iban'
  /**
   * Currency
   */
  currency: 'eur'
  /**
   * The type of the account ownership. Required when the account_type is iban. For individual ownership, first_name and last_name are required. For business ownership, business_name is required.
   */
  account_owner_type: 'individual' | 'business'
  /**
   * First name of the individual account holder. Required when the account_owner_type is individual
   */
  first_name?: string
  /**
   * Business name of the business account holder. Required when the account_owner_type is business
   */
  business_name?: string
  /**
   * First name of the individual account holder. Required when the account_owner_type is individual
   */
  last_name?: string
  /**
   * Account owner name
   */
  account_owner_name: string
  /**
   * Bank name
   */
  bank_name: string
  /**
   * Billing address
   */
  address: Address
}

export type SourceDepositInstructionsUsDto = {
  /**
   * The source currency, for US only usd
   */
  currency: 'usd'
  /**
   * Bank beneficiary name.
   */
  bank_beneficiary_name: {
    [key: string]: unknown
  }
  /**
   * Bank beneficiary name.
   */
  bank_beneficiary_address: {
    [key: string]: unknown
  }
  /**
   * Bank name.
   */
  bank_name: string
  /**
   * Bank address.
   */
  bank_address: string
  /**
   * Bank routing number.
   */
  bank_routing_number: string
  /**
   * Bank account number.
   */
  bank_account_number: string
  /**
   * Available payment rails.
   */
  payment_rails: Array<Array<unknown>>
  /**
   * Available payment rails. For EUR only sepa
   */
  payment_rail: Array<string>
}

export type SourceDepositInstructionsIbanDto = {
  /**
   * The source currency, for IBNA only eur
   */
  currency: 'eur'
  /**
   * Account Iban Number
   */
  iban: string
  /**
   * Bank BIC Number
   */
  bic: string
  /**
   * Account holder name
   */
  account_holder_name: string
  /**
   * Bank name.
   */
  bank_name: string
  /**
   * Bank address.
   */
  bank_address: string
  /**
   * Available payment rails. For EUR only sepa
   */
  payment_rails: Array<Array<unknown>>
  /**
   * Available payment rails. For EUR only sepa
   */
  payment_rail: Array<string>
}

export type UpdateUserDetailsData = {
  body: UpdateUserDetailsDto
  path?: never
  query?: never
  url: '/users/update-details'
}

export type UpdateUserDetailsResponses = {
  200: UserResponseDto
}

export type UpdateUserDetailsResponse = UpdateUserDetailsResponses[keyof UpdateUserDetailsResponses]

export type UpdatePrivyWalletAddressesData = {
  body: UpdatePrivyWalletAddressesDto
  path?: never
  query?: never
  url: '/users/update-privy-wallets'
}

export type UpdatePrivyWalletAddressesResponses = {
  200: UserResponseDto
}

export type UpdatePrivyWalletAddressesResponse = UpdatePrivyWalletAddressesResponses[keyof UpdatePrivyWalletAddressesResponses]

export type UploadAvatarData = {
  body: UpdateUserAvatarDto
  path?: never
  query?: never
  url: '/users/me/upload-avatar'
}

export type UploadAvatarResponses = {
  200: UserResponseDto
}

export type UploadAvatarResponse = UploadAvatarResponses[keyof UploadAvatarResponses]

export type UploadAvatarFileData = {
  /**
   * Avatar image file
   */
  body: {
    /**
     * Avatar image file (max 5MB)
     */
    avatar?: Blob | File
  }
  path?: never
  query?: never
  url: '/users/me/upload-avatar-file'
}

export type UploadAvatarFileResponses = {
  200: UserResponseDto
}

export type UploadAvatarFileResponse = UploadAvatarFileResponses[keyof UploadAvatarFileResponses]

export type DeleteAvatarData = {
  body?: never
  path?: never
  query?: never
  url: '/users/me/delete-avatar'
}

export type DeleteAvatarResponses = {
  200: UserResponseDto
}

export type DeleteAvatarResponse = DeleteAvatarResponses[keyof DeleteAvatarResponses]

export type GetMeData = {
  body?: never
  path?: never
  query?: never
  url: '/users/me'
}

export type GetMeResponses = {
  200: UserResponseDto
}

export type GetMeResponse = GetMeResponses[keyof GetMeResponses]

export type GetAllFormsData = {
  body?: never
  path?: never
  query?: never
  url: '/tax-form/tax-forms'
}

export type GetAllFormsResponses = {
  200: Array<TaxFormVaultInfoDto>
}

export type GetAllFormsResponse = GetAllFormsResponses[keyof GetAllFormsResponses]

export type RequestTaxFormAccessData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/tax-form/request/{id}'
}

export type RequestTaxFormAccessResponses = {
  200: RequestTaxFormAccessResponseDto
}

export type RequestTaxFormAccessResponse = RequestTaxFormAccessResponses[keyof RequestTaxFormAccessResponses]

export type AccessTaxFormData = {
  body: AccessTaxFormDto
  path: {
    id: string
  }
  query?: never
  url: '/tax-form/access/{id}'
}

export type AccessTaxFormResponses = {
  200: AccessTaxFormResponseDto
}

export type AccessTaxFormResponse = AccessTaxFormResponses[keyof AccessTaxFormResponses]

export type TaxFormDownloadedData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/tax-form/downloaded/{id}'
}

export type TaxFormDownloadedResponses = {
  201: unknown
}

export type CreateTaxInfoData = {
  body: TaxInfoCreationDto
  path?: never
  query?: never
  url: '/tax-info/create'
}

export type CreateTaxInfoResponses = {
  200: TaxInfoDto
}

export type CreateTaxInfoResponse = CreateTaxInfoResponses[keyof CreateTaxInfoResponses]

export type GetLatestVaultOwnerTaxInfoData = {
  body?: never
  path?: never
  query?: never
  url: '/tax-info/latest'
}

export type GetLatestVaultOwnerTaxInfoResponses = {
  200: VaultWithTaxInfoDto
}

export type GetLatestVaultOwnerTaxInfoResponse = GetLatestVaultOwnerTaxInfoResponses[keyof GetLatestVaultOwnerTaxInfoResponses]

export type ProcessCreatorConfigData = {
  body: AdminDetailsDto
  path: {
    vaultId: string
  }
  query?: never
  url: '/creator-handler/process-vault-creation/{vaultId}'
}

export type ProcessCreatorConfigResponses = {
  200: VaultDto
}

export type ProcessCreatorConfigResponse = ProcessCreatorConfigResponses[keyof ProcessCreatorConfigResponses]

export type CreateTransactionData = {
  body: SendEvmTransactionDto
  path?: never
  query?: never
  url: '/evm-transaction-sender'
}

export type CreateTransactionResponses = {
  201: SendEvmTransactionDto
}

export type CreateTransactionResponse = CreateTransactionResponses[keyof CreateTransactionResponses]

export type GetCurrentUserWalletsData = {
  body?: never
  path?: never
  query?: never
  url: '/wallet/current-user-wallets'
}

export type GetCurrentUserWalletsResponses = {
  200: Array<WalletDto>
}

export type GetCurrentUserWalletsResponse = GetCurrentUserWalletsResponses[keyof GetCurrentUserWalletsResponses]

export type CheckWalletData = {
  body: WalletCreationDto
  path?: never
  query?: never
  url: '/wallet/check-wallet'
}

export type CheckWalletResponses = {
  200: WalletStatusDto
}

export type CheckWalletResponse = CheckWalletResponses[keyof CheckWalletResponses]

export type CreateWalletData = {
  body: WalletCreationDto
  path?: never
  query?: never
  url: '/wallet/create-wallet'
}

export type CreateWalletResponses = {
  200: WalletDto
}

export type CreateWalletResponse = CreateWalletResponses[keyof CreateWalletResponses]

export type GetTokenData = {
  body?: never
  path?: never
  query?: never
  url: '/sum-sub/token'
}

export type GetTokenResponses = {
  200: SumSubTokenResponseDto
}

export type GetTokenResponse = GetTokenResponses[keyof GetTokenResponses]

export type AddApplicantData = {
  body: SumSubApplicantDetailDto
  path?: never
  query?: never
  url: '/sum-sub/add'
}

export type AddApplicantResponses = {
  200: SumSubApplicantResponseDto
}

export type AddApplicantResponse = AddApplicantResponses[keyof AddApplicantResponses]

export type CreateVaultsData = {
  body: VaultsCreatorConfigDto
  path?: never
  query?: never
  url: '/vaults-creator/create'
}

export type CreateVaultsResponses = {
  200: VaultsCreatorDto
}

export type CreateVaultsResponse = CreateVaultsResponses[keyof CreateVaultsResponses]

export type GetVaultsCreationStatusData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/vaults-creator/{id}/status'
}

export type GetVaultsCreationStatusResponses = {
  200: VaultsCreationStatusDto
}

export type GetVaultsCreationStatusResponse = GetVaultsCreationStatusResponses[keyof GetVaultsCreationStatusResponses]

export type GetVaultsInfoData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/vaults-creator/{id}/info'
}

export type GetVaultsInfoResponses = {
  200: VaultsCreatorDto
}

export type GetVaultsInfoResponse = GetVaultsInfoResponses[keyof GetVaultsInfoResponses]

export type PaymasterData = {
  body: PaymasterServiceRequestDto
  path?: never
  query?: never
  url: '/paymaster'
}

export type PaymasterResponses = {
  200: PaymasterServiceResponseDto
}

export type PaymasterResponse = PaymasterResponses[keyof PaymasterResponses]

export type CreateFundingNoteData = {
  body: CreateFundingNoteDto
  path?: never
  query?: never
  url: '/notes'
}

export type CreateFundingNoteResponses = {
  201: unknown
}

export type CreateCustomData = {
  body: CreateCustomerDto
  path?: never
  query?: never
  url: '/direct-vaults/create-customer'
}

export type CreateCustomResponses = {
  200: BridgeKycEntity
}

export type CreateCustomResponse = CreateCustomResponses[keyof CreateCustomResponses]

export type CreateBankingInfoData = {
  body: CreateBankingInfoDto
  path?: never
  query?: never
  url: '/direct-vaults/create-bankin-info'
}

export type CreateBankingInfoResponses = {
  200: BankingInfoEntity
}

export type CreateBankingInfoResponse = CreateBankingInfoResponses[keyof CreateBankingInfoResponses]

export type CheckKycData = {
  body: CheckKycStatusDto
  path?: never
  query?: never
  url: '/direct-vaults/check-kyc-status'
}

export type CheckKycResponses = {
  200: CreateCustomerFromKycResponseDto
}

export type CheckKycResponse = CheckKycResponses[keyof CheckKycResponses]

export type CreateLiquidationAddressData = {
  body: CreateLiquidationAddressShortDto
  path?: never
  query?: never
  url: '/direct-vaults/create-liquidation-address'
}

export type CreateLiquidationAddressResponses = {
  200: LiquidationAddressEntity
}

export type CreateLiquidationAddressResponse = CreateLiquidationAddressResponses[keyof CreateLiquidationAddressResponses]

export type GetLiqAddressDrainHistoryData = {
  body: GetLiqAddressDrainHistoryDto
  path?: never
  query?: never
  url: '/direct-vaults/get-liquidation-address-drain-history'
}

export type GetLiqAddressDrainHistoryResponses = {
  200: GetLiqAddressDrainHistoryResponseDto
}

export type GetLiqAddressDrainHistoryResponse = GetLiqAddressDrainHistoryResponses[keyof GetLiqAddressDrainHistoryResponses]

export type GetBankingInfoData = {
  body?: never
  path?: never
  query?: never
  url: '/banking-info'
}

export type GetBankingInfoResponses = {
  200: Array<BankingInfoEntity>
}

export type GetBankingInfoResponse = GetBankingInfoResponses[keyof GetBankingInfoResponses]

export type GetBankingInfoByIdData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/banking-info/{id}'
}

export type GetBankingInfoByIdResponses = {
  200: BankingInfoEntity
}

export type GetBankingInfoByIdResponse = GetBankingInfoByIdResponses[keyof GetBankingInfoByIdResponses]

export type GetLiquidationAddressByAuth0IdData = {
  body?: never
  path?: never
  query?: never
  url: '/liquidation-addresses'
}

export type GetLiquidationAddressByAuth0IdResponses = {
  200: Array<LiquidationAddressEntity>
}

export type GetLiquidationAddressByAuth0IdResponse = GetLiquidationAddressByAuth0IdResponses[keyof GetLiquidationAddressByAuth0IdResponses]

export type GetLiquidationAddressByIdData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/liquidation-addresses/{id}'
}

export type GetLiquidationAddressByIdResponses = {
  200: LiquidationAddressEntity
}

export type GetLiquidationAddressByIdResponse = GetLiquidationAddressByIdResponses[keyof GetLiquidationAddressByIdResponses]

export type GetVirtualAccountsByAuth0IdData = {
  body?: never
  path?: never
  query?: never
  url: '/virtual-accounts'
}

export type GetVirtualAccountsByAuth0IdResponses = {
  200: Array<VirtualAccountEntity>
}

export type GetVirtualAccountsByAuth0IdResponse = GetVirtualAccountsByAuth0IdResponses[keyof GetVirtualAccountsByAuth0IdResponses]

export type CreateVirtualAccountData = {
  body: CreateVirtualAccountDto
  path?: never
  query?: never
  url: '/virtual-accounts'
}

export type CreateVirtualAccountResponses = {
  200: VirtualAccountEntity
}

export type CreateVirtualAccountResponse = CreateVirtualAccountResponses[keyof CreateVirtualAccountResponses]

export type GetUnifiedAccountsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Filter by transfer type
     */
    transferType?: 'bridge' | 'direct_web3'
    /**
     * Filter by vault name
     */
    vaultName?: string
  }
  url: '/virtual-accounts/unified'
}

export type GetUnifiedAccountsResponses = {
  /**
   * Get all unified accounts (both Bridge and direct Web3) with optional filtering
   */
  200: {
    bridgeAccounts?: Array<LiquidationAddressEntity>
    directRecipients?: Array<DirectRecipientEntity>
    total?: number
  }
}

export type GetUnifiedAccountsResponse = GetUnifiedAccountsResponses[keyof GetUnifiedAccountsResponses]

export type CreateUnifiedAccountData = {
  body: CreateUnifiedAccountDto
  path?: never
  query?: never
  url: '/virtual-accounts/unified'
}

export type CreateUnifiedAccountResponses = {
  /**
   * Create unified account - either Bridge liquidation address or direct Web3 recipient
   */
  201: LiquidationAddressEntity | DirectRecipientEntity
}

export type CreateUnifiedAccountResponse = CreateUnifiedAccountResponses[keyof CreateUnifiedAccountResponses]

export type GetVirtualAccountByIdData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/virtual-accounts/{id}'
}

export type GetVirtualAccountByIdResponses = {
  200: VirtualAccountEntity
}

export type GetVirtualAccountByIdResponse = GetVirtualAccountByIdResponses[keyof GetVirtualAccountByIdResponses]

export type UpdateVirtualAccountData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/virtual-accounts/{id}'
}

export type UpdateVirtualAccountResponses = {
  /**
   * Fetch virtual account from Bridge and save updated version to the local DB
   */
  200: VirtualAccountEntity
}

export type UpdateVirtualAccountResponse = UpdateVirtualAccountResponses[keyof UpdateVirtualAccountResponses]

export type GetVirtualAccountActvityData = {
  body?: never
  path: {
    virtualAccountId: string
  }
  query: {
    customerId: string
    eventType: string
  }
  url: '/virtual-accounts/{virtualAccountId}/activity/all'
}

export type GetVirtualAccountActvityResponses = {
  /**
   * Fetch all virtual account activity from Bridge (non-paginated)
   */
  200: Array<VirtualAccountActivityItem>
}

export type GetVirtualAccountActvityResponse = GetVirtualAccountActvityResponses[keyof GetVirtualAccountActvityResponses]

export type GetVirtualAccountActivityPaginatedData = {
  body?: never
  path: {
    virtualAccountId: string
  }
  query: {
    customerId: string
    /**
     * Maximum number of items to return per page
     */
    limit?: string
    /**
     * ID to start pagination after
     */
    startingAfterId?: string
    /**
     * ID to end pagination before
     */
    endingBeforeId?: string
    /**
     * Filter by event type
     */
    eventType?: string
  }
  url: '/virtual-accounts/{virtualAccountId}/activity'
}

export type GetVirtualAccountActivityPaginatedResponses = {
  /**
   * Fetch virtual account activity from Bridge with pagination
   */
  200: Array<VirtualAccountActivityItem>
}

export type GetVirtualAccountActivityPaginatedResponse =
  GetVirtualAccountActivityPaginatedResponses[keyof GetVirtualAccountActivityPaginatedResponses]

export type GetDirectRecipientsData = {
  body?: never
  path?: never
  query?: never
  url: '/virtual-accounts/direct-recipients'
}

export type GetDirectRecipientsResponses = {
  /**
   * Get all direct Web3 recipients for the authenticated user
   */
  200: Array<DirectRecipientEntity>
}

export type GetDirectRecipientsResponse = GetDirectRecipientsResponses[keyof GetDirectRecipientsResponses]

export type GetDirectRecipientByIdData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/virtual-accounts/direct-recipients/{id}'
}

export type GetDirectRecipientByIdResponses = {
  /**
   * Get a specific direct Web3 recipient by ID
   */
  200: DirectRecipientEntity
}

export type GetDirectRecipientByIdResponse = GetDirectRecipientByIdResponses[keyof GetDirectRecipientByIdResponses]

export type GetAllUserVaultsData = {
  body?: never
  path?: never
  query?: {
    role?: string
  }
  url: '/vault/vaults'
}

export type GetAllUserVaultsResponses = {
  200: Array<VaultDto>
}

export type GetAllUserVaultsResponse = GetAllUserVaultsResponses[keyof GetAllUserVaultsResponses]

export type GetVaultByIdData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/vault/{id}'
}

export type GetVaultByIdResponses = {
  200: VaultDto
}

export type GetVaultByIdResponse = GetVaultByIdResponses[keyof GetVaultByIdResponses]

export type GetVaultInfoByIdData = {
  body?: never
  path: {
    id: string
  }
  query: {
    role: string
  }
  url: '/vault/{id}/info'
}

export type GetVaultInfoByIdResponses = {
  200: VaultInfoDto
}

export type GetVaultInfoByIdResponse = GetVaultInfoByIdResponses[keyof GetVaultInfoByIdResponses]

export type GetVaultInfoByIdAndTokenIdData = {
  body?: never
  path: {
    id: string
  }
  query: {
    tokenId: string
  }
  url: '/vault/{id}/info-by-token-id'
}

export type GetVaultInfoByIdAndTokenIdResponses = {
  200: VaultInfoDto
}

export type GetVaultInfoByIdAndTokenIdResponse = GetVaultInfoByIdAndTokenIdResponses[keyof GetVaultInfoByIdAndTokenIdResponses]

export type GetVaultTransactionStatusData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/vault/{id}/status'
}

export type GetVaultTransactionStatusResponses = {
  200: VaultTransactionStatusDto
}

export type GetVaultTransactionStatusResponse = GetVaultTransactionStatusResponses[keyof GetVaultTransactionStatusResponses]

export type GetSelfManagedVaultTransactionStatusData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/vault/{id}/self-managed-status'
}

export type GetSelfManagedVaultTransactionStatusResponses = {
  200: SelfManagedVaultTransactionStatusDto
}

export type GetSelfManagedVaultTransactionStatusResponse =
  GetSelfManagedVaultTransactionStatusResponses[keyof GetSelfManagedVaultTransactionStatusResponses]

export type CreateVaultData = {
  body: VaultCreationDto
  path?: never
  query?: never
  url: '/vault'
}

export type CreateVaultResponses = {
  200: VaultDto
}

export type CreateVaultResponse = CreateVaultResponses[keyof CreateVaultResponses]

export type UpdateRoleEmailData = {
  body: UpdateRoleEmailDto
  path: {
    id: string
  }
  query?: never
  url: '/vault/{id}/update-role-email'
}

export type UpdateRoleEmailResponses = {
  200: VaultDto
}

export type UpdateRoleEmailResponse = UpdateRoleEmailResponses[keyof UpdateRoleEmailResponses]

export type FinishSelfManagedVaultClaimData = {
  body: UpdateRoleEmailDto
  path: {
    id: string
  }
  query?: never
  url: '/vault/{id}/finish-self-managed-vault-claim'
}

export type FinishSelfManagedVaultClaimResponses = {
  200: VaultDto
}

export type FinishSelfManagedVaultClaimResponse = FinishSelfManagedVaultClaimResponses[keyof FinishSelfManagedVaultClaimResponses]

export type UnwatchVaultData = {
  body?: never
  path: {
    id: string
  }
  query: {
    role: string
  }
  url: '/vault/{id}/unwatch'
}

export type UnwatchVaultResponses = {
  200: VaultDto
}

export type UnwatchVaultResponse = UnwatchVaultResponses[keyof UnwatchVaultResponses]

export type WatchAllVaultsData = {
  body?: never
  path?: never
  query?: never
  url: '/vault/watch-all'
}

export type WatchAllVaultsResponses = {
  200: Array<VaultDto>
}

export type WatchAllVaultsResponse = WatchAllVaultsResponses[keyof WatchAllVaultsResponses]

export type GetVaultKeysData = {
  body?: never
  path: {
    walletAddress: string
  }
  query?: never
  url: '/vault/keys/{walletAddress}'
}

export type GetVaultKeysResponses = {
  200: Array<VaultKeysDto>
}

export type GetVaultKeysResponse = GetVaultKeysResponses[keyof GetVaultKeysResponses]

export type CreateSelfManagedVaultData = {
  body: VaultCreationDto
  path?: never
  query?: never
  url: '/vault/create-self-managed'
}

export type CreateSelfManagedVaultResponses = {
  200: VaultDto
}

export type CreateSelfManagedVaultResponse = CreateSelfManagedVaultResponses[keyof CreateSelfManagedVaultResponses]

export type SignVaultTransactionData = {
  body: SignVaultTransactionDto
  path?: never
  query?: never
  url: '/vault/sign-vault-transaction'
}

export type SignVaultTransactionResponses = {
  200: SignVaultTransactionResultDto
}

export type SignVaultTransactionResponse = SignVaultTransactionResponses[keyof SignVaultTransactionResponses]

export type CreateInquiryIdData = {
  body?: never
  path?: never
  query?: never
  url: '/persona/create-inquiry-id'
}

export type CreateInquiryIdResponses = {
  200: PersonaInquiryIdResponseDto
}

export type CreateInquiryIdResponse = CreateInquiryIdResponses[keyof CreateInquiryIdResponses]

export type UpdateApplicantData = {
  body: PersonaApplicantDetailDto
  path?: never
  query?: never
  url: '/persona/update-applicant'
}

export type UpdateApplicantResponses = {
  200: PersonaApplicantResponseDto
}

export type UpdateApplicantResponse = UpdateApplicantResponses[keyof UpdateApplicantResponses]

export type CreateData = {
  body: CreateAddressActivityDto
  path?: never
  query?: never
  url: '/address-activity'
}

export type CreateResponses = {
  201: unknown
}

export type FindData = {
  body?: never
  path: {
    address: string
  }
  query?: never
  url: '/address-activity/{address}'
}

export type FindResponses = {
  200: unknown
}

export type HandleAlchemyWebhookData = {
  body?: never
  headers: {
    'x-alchemy-signature': string
  }
  path?: never
  query?: never
  url: '/webhook/alchemy'
}

export type HandleAlchemyWebhookResponses = {
  201: unknown
}

export type FileTicketData = {
  body: CreateSupportTicketDto
  path?: never
  query?: never
  url: '/support-tickets'
}

export type FileTicketResponses = {
  201: unknown
}

export type GetTransactionItemsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Max number of items to return per page
     */
    limit?: number
    /**
     * Base64-encoded cursor for paginated results (from previous nextCursor)
     */
    cursor?: string
    /**
     * Filter by transaction type
     */
    type?: string
    /**
     * Filter by transaction source
     */
    source?: 'alchemy' | 'bridge' | 'manual'
    /**
     * Filter by transaction currency code
     */
    currency?: string
    /**
     * Filter by virtual account ID
     */
    virtualAccountId?: string
    /**
     * Filter by transactions occurring after this date (ISO format)
     */
    startDate?: string
    /**
     * Filter by transactions occurring before this date (ISO format)
     */
    endDate?: string
  }
  url: '/transaction-items'
}

export type GetTransactionItemsResponses = {
  200: GetTransactionItemsResponseDto
}

export type GetTransactionItemsResponse = GetTransactionItemsResponses[keyof GetTransactionItemsResponses]

export type GetTransactionItemByIdData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/transaction-items/{id}'
}

export type GetTransactionItemByIdResponses = {
  200: TransactionItemResponseDto
}

export type GetTransactionItemByIdResponse = GetTransactionItemByIdResponses[keyof GetTransactionItemByIdResponses]

export type GetTransactionItemsByVirtualAccountIdData = {
  body?: never
  path: {
    virtualAccountId: string
  }
  query?: never
  url: '/transaction-items/virtual-account/{virtualAccountId}'
}

export type GetTransactionItemsByVirtualAccountIdResponses = {
  200: Array<TransactionItemResponseDto>
}

export type GetTransactionItemsByVirtualAccountIdResponse =
  GetTransactionItemsByVirtualAccountIdResponses[keyof GetTransactionItemsByVirtualAccountIdResponses]

export type TestUpsertData = {
  body?: never
  path?: never
  query?: never
  url: '/transaction-items/test'
}

export type TestUpsertResponses = {
  201: unknown
}

export type GetForexRatesData = {
  body?: never
  path?: never
  query?: never
  url: '/forex/rates'
}

export type GetForexRatesResponses = {
  /**
   * Current forex rates
   */
  200: unknown
}

export type GetUserForexRatesData = {
  body?: never
  path?: never
  query?: never
  url: '/forex/user/rates'
}

export type GetUserForexRatesResponses = {
  /**
   * Current forex rates for authenticated users
   */
  200: ForexRatesResponseDto
}

export type GetUserForexRatesResponse = GetUserForexRatesResponses[keyof GetUserForexRatesResponses]

export type FetchForexRatesData = {
  body?: never
  path?: never
  query?: never
  url: '/forex/fetch'
}

export type FetchForexRatesResponses = {
  /**
   * Forex rates updated successfully
   */
  200: unknown
}

export type CheckData = {
  body?: never
  path?: never
  query?: never
  url: '/'
}

export type CheckResponses = {
  200: unknown
}

export type TestData = {
  body?: never
  path?: never
  query?: never
  url: '/test'
}

export type TestResponses = {
  200: unknown
}
