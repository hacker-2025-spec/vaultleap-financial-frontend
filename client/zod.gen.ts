// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod'

export const zUpdateUserDetailsDTO = z.object({
  name: z.string(),
  entityName: z.string().optional(),
  jurisdiction: z.string().optional(),
  registrationId: z.string().optional(),
  countryOfResidence: z.string().optional(),
})

export const zCustomerEntity = z.object({
  auth0Id: z.string(),
  id: z.string(),
  bridgeCustomerId: z.string(),
  first_name: z.string(),
  last_name: z.string(),
  email: z.string(),
  status: z.string(),
  type: z.enum(['individual', 'business']),
  future_requirements_due: z.array(z.string()),
  requirements_due: z.array(z.string()),
  capabilities: z.object({}),
  persona_inquiry_type: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  rejection_reasons: z.array(z.string()),
  has_accepted_terms_of_service: z.boolean(),
  signed_agreement_id: z.string().optional(),
  endorsements: z.array(z.object({})),
})

export const zBridgeKYCEntity = z.object({
  auth0Id: z.string(),
  id: z.string(),
  bridgeKycId: z.string(),
  full_name: z.string(),
  email: z.string(),
  type: z.string(),
  kyc_link: z.string(),
  tos_link: z.string(),
  kyc_status: z.string(),
  tos_status: z.string(),
  created_at: z.string(),
  customer_id: z.string(),
  persona_inquiry_type: z.string(),
})

export const zUserResponseDTO = z.object({
  auth0Id: z.string(),
  email: z.string(),
  name: z.string(),
  isPremium: z.boolean(),
  avatar: z.string().optional(),
  avatarS3Key: z.string().optional(),
  customer: zCustomerEntity.optional(),
  bridgeKyc: zBridgeKYCEntity.optional(),
  countryOfResidence: z.string().optional(),
  privyWalletAddress: z.string().optional(),
  privySmartWalletAddress: z.string().optional(),
})

export const zUpdatePrivyWalletAddressesDto = z.object({
  privyWalletAddress: z.string(),
  privySmartWalletAddress: z.string(),
})

export const zUpdateUserAvatarDto = z.object({
  avatar: z.string(),
})

export const zTaxUserType = z.enum(['payer', 'recipient'])

export const zTaxFormVaultInfoDto = z.object({
  id: z.string(),
  vaultId: z.string(),
  s3Key: z.string(),
  shareHolderRoleAddress: z.string(),
  formType: z.string(),
  userType: zTaxUserType.optional(),
  taxYear: z.number(),
  projectName: z.string(),
})

export const zRequestTaxFormAccessResponseDto = z.object({
  status: z.string(),
})

export const zAccessTaxFormDto = z.object({
  securityCode: z.string(),
})

export const zAccessTaxFormResponseDto = z.object({
  s3Key: z.string(),
  downloadUrl: z.string(),
})

export const zTaxFormType = z.enum(['1099', 'W9', 'W8_BEN', 'W8_BEN_E'])

export const zTaxInfo1099FormDto = z.object({
  businessName: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  zip: z.string(),
  ssn: z.string().optional(),
  ein: z.string().optional(),
})

export const zFedTaxClassification = z.enum([
  'C Corporation',
  'S Corporation',
  'Partnership',
  'Trust / Estate',
  'Individual / Sole Proprietor or single-member LLC',
  'LLC',
  'other',
])

export const zTaxInfoW9FormDto = z.object({
  fullName: z.string(),
  businessName: z.string().optional(),
  fedTaxClassification: zFedTaxClassification,
  llcClassification: z.string().optional(),
  otherClassification: z.string().optional(),
  payeeCode: z.string().optional(),
  exemptionCode: z.string().optional(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  zip: z.string(),
  ssn: z.string().optional(),
  ein: z.string().optional(),
  readAndUnderstand: z.boolean(),
  signature: z.string(),
  date: z.string(),
  consent: z.boolean(),
})

export const zTaxInfoW8BenFormDto = z.object({
  ownerName: z.string(),
  citizenshipCountry: z.string(),
  address: z.string(),
  city: z.string(),
  country: z.string(),
  mailingAddress: z.string().optional(),
  mailingCity: z.string().optional(),
  mailingCountry: z.string().optional(),
  usTaxId: z.string().optional(),
  foreignTaxId: z.string().optional(),
  ftinNotRequired: z.boolean(),
  referenceNumbers: z.string().optional(),
  dateOfBirth: z.string(),
  countryOfTaxTreaty: z.string().optional(),
  treatyArticle: z.string().optional(),
  paragraph: z.string().optional(),
  withholdingRate: z.string().optional(),
  typeOfIncome: z.string().optional(),
  additionalConditions: z.string().optional(),
  certify: z.boolean(),
  readAndUnderstand: z.boolean(),
  signature: z.string(),
  signerName: z.string(),
  date: z.string(),
  consent: z.boolean(),
})

export const zIdentificationStatus = z.enum([
  'Simple Trust',
  'Private Foundation',
  'Complex Trust',
  'Central Bank of Issue',
  'Partnership',
  'Estate',
  'Grantor Trust',
  'Disregarded Entity',
  'International Organization',
  'Tax-exempt Organization',
  'Corporation',
  'Foreign Government - Controlled Entity',
  'Foreign Government - Integral Part',
])

export const zFATCAStatus = z.enum([
  'Participating FFI',
  'Reporting Model 1 FFI',
  'Reporting Model 2 FFI',
  'Sponsored FFI (Complete Part IV)',
  'Certified deemed-compliant nonregistering local bank (Complete Part V)',
  'Certified deemed-compliant FFI with only low-value accounts (Complete Part VI)',
  'Certified deemed-compliant sponsored, closely held investment vehicle (Complete Part VII)',
  'Certified deemed-compliant limited life debt investment entity (Complete Part VIII)',
  'Certain investment entities that donâ€™t maintain financial accounts (Complete Part IX)',
  'Owner-documented FFI (Complete Part X)',
  'Restricted distributor (Complete Part XI)',
  'Nonreporting IGA FFI (Complete Part XII)',
  'Foreign government, government of a U.S. possession, or foreign central bank of issue (Complete Part XIII)',
  'International organization (Complete Part XIV)',
  'Exempt retirement plans (Complete Part XV)',
  'Entity wholly owned by exempt beneficial owners (Complete Part XVI)',
  'Territory financial institution (Complete Part XVII)',
  'Excepted nonfinancial group entity (Complete Part XVIII)',
  'Excepted nonfinancial start-up company (Complete Part XIX)',
  'Excepted nonfinancial entity in liquidation or bankruptcy (Complete Part XX)',
  '501(c) organization (Complete Part XXI)',
  'Nonprofit organization (Complete Part XXII)',
  'Publicly traded NFFE or NFFE affiliate of a publicly traded corporation (Complete Part XXIII)',
  'Excepted territory NFFE (Complete Part XXIV)',
  'Active NFFE (Complete Part XXV)',
  'Passive NFFE (Complete Part XXVI)',
  'Excepted inter-affiliate FFI (Complete Part XXVII)',
  'Direct reporting NFFE',
  'Sponsored direct reporting NFFE (Complete Part XXVIII)',
  'Account that is not a financial account',
  'Nonparticipating FFI (including an FFI related to a Reporting IGA FFI other than a deemed-compliant FFI, participating FFI, or exempt beneficial owner)',
  'Registered deemed-compliant FFI (other than a reporting Model 1 FFI, sponsored FFI, or nonreporting IGA FFI covered in Part XII)',
])

export const zEntityFATCAStatus = z.enum([
  'Branch treated as nonparticipating FFI',
  'Reporting Model 1 FFI',
  'U.S. Branch',
  'Participating FFI',
  'Reporting Model 2 FFI',
])

export const zTaxTreatyBenefits = z.enum([
  'Government',
  'Tax-exempt pension trust or pension fund',
  'Other tax-exempt organization',
  'Publicly traded corporation',
  'Subsidiary of a publicly traded corporation',
  'Company that meets the ownership and base erosion test',
  'Company that meets the derivative benefits test',
  'Company with an item of income that meets active trade or business test',
  'Favorable discretionary determination by the U.S. competent authority received',
  'No LOB article in treaty',
  'Other (specify Article and paragraph):',
])

export const zSponsoredFIICertify = z.enum(['1', '2'])

export const zTrusteeCountry = z.enum(['U.S', 'FOREIGN'])

export const zTaxInfoW8BenEFormDto = z.object({
  organizationName: z.string(),
  countryOfIncorporation: z.string(),
  disregardedEntityName: z.string().optional(),
  status: zIdentificationStatus,
  isTreatyClaim: z.boolean().optional(),
  fatcaStatus: zFATCAStatus,
  permanentResidenceAddress: z.string(),
  permanentResidenceCity: z.string(),
  permanentResidenceCountry: z.string(),
  mailingAddress: z.string().optional(),
  mailingCity: z.string().optional(),
  mailingCountry: z.string().optional(),
  usTaxId: z.string().optional(),
  giin: z.string().optional(),
  foreignTaxId: z.string().optional(),
  ftinNotRequired: z.boolean().optional(),
  referenceNumbers: z.string().optional(),
  entityFatcaStatus: zEntityFATCAStatus.optional(),
  entityAddress: z.string().optional(),
  entityCity: z.string().optional(),
  entityCountry: z.string().optional(),
  entityGiin: z.string().optional(),
  certificateTaxTreatyA: z.boolean().optional(),
  certificateTaxTreatyACountry: z.string().optional(),
  certificateTaxTreatyB: z.boolean().optional(),
  certificateTaxTreatyBBenefit: zTaxTreatyBenefits.optional(),
  certificateTaxTreatyBOther: z.string().optional(),
  certificateTaxTreatyC: z.boolean().optional(),
  ratesTreatyArticle: z.string().optional(),
  ratesParagraph: z.string().optional(),
  ratesWithholdingRate: z.string().optional(),
  ratesTypeOfIncome: z.string().optional(),
  ratesAdditionalConditions: z.string().optional(),
  sponsoringEntityName: z.string().optional(),
  sponsoringEntityCertify: zSponsoredFIICertify.optional(),
  certify18: z.boolean().optional(),
  certify19: z.boolean().optional(),
  sponsoringEntityNamePartVII: z.string().optional(),
  certify21: z.boolean().optional(),
  certify22: z.boolean().optional(),
  certify23: z.boolean().optional(),
  certify24A: z.boolean().optional(),
  certify24B: z.boolean().optional(),
  certify24C: z.boolean().optional(),
  certify24D: z.boolean().optional(),
  certify25A: z.boolean().optional(),
  certify25B: z.boolean().optional(),
  certify25C: z.boolean().optional(),
  certify26: z.boolean().optional(),
  country26: z.string().optional(),
  institutionType26: z.string().optional(),
  model1Iga26: z.boolean().optional(),
  model2Iga26: z.boolean().optional(),
  trusteeName26: z.string().optional(),
  trusteeCountry26: zTrusteeCountry.optional(),
  certify27: z.boolean().optional(),
  certify28A: z.boolean().optional(),
  certify28B: z.boolean().optional(),
  certify29A: z.boolean().optional(),
  certify29B: z.boolean().optional(),
  certify29C: z.boolean().optional(),
  certify29D: z.boolean().optional(),
  certify29E: z.boolean().optional(),
  certify29F: z.boolean().optional(),
  certify30: z.boolean().optional(),
  certify31: z.boolean().optional(),
  certify32: z.boolean().optional(),
  certify33: z.boolean().optional(),
  date33: z.string().optional(),
  certify34: z.boolean().optional(),
  date34: z.string().optional(),
  certify35: z.boolean().optional(),
  date35: z.string().optional(),
  certify36: z.boolean().optional(),
  certify37A: z.boolean().optional(),
  exchange37A: z.string().optional(),
  certify37B: z.boolean().optional(),
  name37B: z.string().optional(),
  securities37B: z.string().optional(),
  certify38: z.boolean().optional(),
  certify39: z.boolean().optional(),
  certify40A: z.boolean().optional(),
  certify40B: z.boolean().optional(),
  certify40C: z.boolean().optional(),
  certify41: z.boolean().optional(),
  name42: z.string().optional(),
  certify43: z.boolean().optional(),
  name1Part44: z.string().optional(),
  address1Part44: z.string().optional(),
  tin1Part44: z.string().optional(),
  name2Part44: z.string().optional(),
  address2Part44: z.string().optional(),
  tin2Part44: z.string().optional(),
  name3Part44: z.string().optional(),
  address3Part44: z.string().optional(),
  tin3Part44: z.string().optional(),
  name4Part44: z.string().optional(),
  address4Part44: z.string().optional(),
  tin4Part44: z.string().optional(),
  name5Part44: z.string().optional(),
  address5Part44: z.string().optional(),
  tin5Part44: z.string().optional(),
  name6Part44: z.string().optional(),
  address6Part44: z.string().optional(),
  tin6Part44: z.string().optional(),
  name7Part44: z.string().optional(),
  address7Part44: z.string().optional(),
  tin7Part44: z.string().optional(),
  name8Part44: z.string().optional(),
  address8Part44: z.string().optional(),
  tin8Part44: z.string().optional(),
  name9Part44: z.string().optional(),
  address9Part44: z.string().optional(),
  tin9Part44: z.string().optional(),
  certify: z.boolean(),
  signature: z.string(),
  signerName: z.string(),
  date: z.string(),
  consent: z.boolean(),
})

export const zTaxInfoCreationDto = z.object({
  vaultId: z.string(),
  email: z.string(),
  formType: zTaxFormType,
  shareHolderRoleAddress: z.string().optional(),
  t1099FormDetails: zTaxInfo1099FormDto.optional(),
  w9FormDetails: zTaxInfoW9FormDto.optional(),
  w8BenFormDetails: zTaxInfoW8BenFormDto.optional(),
  w8BenEFormDetails: zTaxInfoW8BenEFormDto.optional(),
})

export const zTaxInfoDto = z.object({
  vaultId: z.string(),
  email: z.string(),
  formType: zTaxFormType,
  shareHolderRoleAddress: z.string().optional(),
  t1099FormDetails: zTaxInfo1099FormDto.optional(),
  w9FormDetails: zTaxInfoW9FormDto.optional(),
  w8BenFormDetails: zTaxInfoW8BenFormDto.optional(),
  w8BenEFormDetails: zTaxInfoW8BenEFormDto.optional(),
  id: z.string(),
  auth0Id: z.string(),
})

export const zTShareRoleDto = z.object({
  name: z.string(),
  sharePercentage: z.number(),
  emails: z.array(z.string()),
  count: z.number(),
  shareHolderRoleAddress: z.string().optional(),
  totalIncome: z.string().optional(),
  watching: z.boolean().optional(),
  taxInfoProvided: z.boolean().optional(),
})

export const zTRANSACTION_STATUS = z.enum(['created', 'submitted', 'successful', 'rejected'])

export const zVaultDto = z.object({
  userId: z.string(),
  projectName: z.string(),
  roles: z.array(zTShareRoleDto),
  profitSwitchName: z.string().optional(),
  profitSwitchAmount: z.number().optional(),
  profitSwitchAddress: z.string().optional(),
  ownerName: z.string(),
  ownerEmail: z.string(),
  adminWalletAddress: z.string(),
  vaultFeePercentage: z.number(),
  taxFormEnabled: z.boolean().optional(),
  agreeToTOSAndPP: z.boolean(),
  id: z.string(),
  vaultAddress: z.string().optional(),
  watching: z.boolean(),
  currentFunds: z.string().optional(),
  totalPaid: z.string().optional(),
  alreadyClaimed: z.boolean().optional(),
  tokenAddress: z.string().optional(),
  tokenId: z.string().optional(),
  walletAddress: z.string().optional(),
  claimable: z.string().optional(),
  shareholderManagerAddress: z.string(),
  transactionHash: z.string().optional(),
  transactionStatus: zTRANSACTION_STATUS.optional(),
  selfManaged: z.boolean().optional(),
})

export const zVaultWithTaxInfoDto = z.object({
  vaultInfo: zVaultDto,
  taxInfo: zTaxInfoDto.optional(),
})

export const zAdminDetailsDto = z.object({
  walletAddress: z.string(),
})

export const zTRANSACTION_TYPE = z.enum(['claim_vault_keys', 'send_nfts', 'send_usdc', 'claim_usdc', 'reclaim_vault_keys'])

export const zSendEvmTransactionDto = z.object({
  transactionType: zTRANSACTION_TYPE,
  to: z.string(),
  data: z.string(),
})

export const zWALLET_TYPE = z.enum(['metamask', 'coinbase', 'coinbase-smart-wallet', 'wallet-connect'])

export const zWalletDto = z.object({
  address: z.string(),
  auth0Id: z.string(),
  createdAt: z.string().datetime(),
  walletType: zWALLET_TYPE,
})

export const zWalletCreationDto = z.object({
  address: z.string(),
  walletType: z.string(),
})

export const zWALLET_STATUS = z.enum(['WALLET_BELONGS_TO_SOMEONE_ELSE', 'WALLET_ALREADY_ADDED', 'WALLET_NOT_ASSIGNED'])

export const zWalletStatusDto = z.object({
  status: zWALLET_STATUS,
})

export const zSumSubTokenResponseDTO = z.object({
  token: z.string(),
  userId: z.string(),
})

export const zReviewStatus = z.enum(['pending', 'completed'])

export const zSumSubApplicantDetailDTO = z.object({
  applicantId: z.string(),
  applicantStatus: zReviewStatus.optional(),
})

export const zSumSubApplicantResponseDTO = z.object({
  applicantId: z.string(),
  auth0Id: z.string(),
  applicantStatus: zReviewStatus.optional(),
})

export const zCreatorVaultDto = z.object({
  userId: z.string(),
  projectName: z.string(),
  roles: z.array(zTShareRoleDto),
  profitSwitchName: z.string().optional(),
  profitSwitchAmount: z.number().optional(),
  profitSwitchAddress: z.string().optional(),
  ownerName: z.string(),
  ownerEmail: z.string(),
  adminWalletAddress: z.string(),
  vaultFeePercentage: z.number(),
  taxFormEnabled: z.boolean().optional(),
  agreeToTOSAndPP: z.boolean(),
  id: z.string().optional(),
  vaultAddress: z.string().optional(),
  watching: z.boolean().optional(),
  walletAddress: z.string().optional(),
  shareholderManagerAddress: z.string().optional(),
  transactionHash: z.string().optional(),
  transactionStatus: zTRANSACTION_STATUS.optional(),
})

export const zTaxInfoVaultsConfigDto = z.object({
  email: z.string(),
  formType: zTaxFormType,
  t1099FormDetails: zTaxInfo1099FormDto,
})

export const zVaultsCreatorConfigDto = z.object({
  vaults: z.array(zCreatorVaultDto),
  taxFormEnabled: z.boolean(),
  ownerTaxInfo: zTaxInfoVaultsConfigDto.optional(),
})

export const zVaultsCreationStatus = z.enum(['created', 'processing', 'success', 'rejected'])

export const zVaultsCreatorDto = z.object({
  id: z.string(),
  auth0Id: z.string(),
  vaults: z.array(zCreatorVaultDto),
  creationStatus: zVaultsCreationStatus,
})

export const zVaultsCreationStatusDto = z.object({
  status: zVaultsCreationStatus,
})

export const zPaymasterServiceRequestDto = z.object({
  jsonrpc: z.string(),
  id: z.number(),
  method: z.string(),
  params: z.array(z.string()),
})

export const zPaymasterServiceResponseDto = z.object({})

export const zCreateFundingNoteDTO = z.object({})

export const zCreateCustomerFromKycDTO = z.object({
  full_name: z.string(),
  email: z.string(),
  type: z.string(),
})

export const zCreateCustomerDTO = z.object({
  customer: zCreateCustomerFromKycDTO,
  privyWalletAddress: z.string(),
  privySmartWalletAddress: z.string(),
  tosAccepted: z.boolean().default(true),
  signedAgreementId: z.string().optional(),
  developer_accepted_tos: z.boolean().default(true),
})

export const zFunction = z.object({})

export const zCreateBankingInfoDto = z.object({
  bridgeCustomerId: z.string(),
  bankingInfo: zFunction,
})

export const zBankingInfoEntity = z.object({
  auth0Id: z.string(),
  id: z.string(),
  account_type: z.string(),
  currency: z.string(),
  customer_id: z.string(),
  account_owner_name: z.string(),
  account_owner_type: z.string(),
  first_name: z.string(),
  last_name: z.string(),
  business_name: z.string(),
  bank_name: z.string(),
  last_4: z.string(),
  active: z.boolean(),
  beneficiary_address_valid: z.boolean(),
  account: z.object({
    last_4: z.string().optional(),
    routing_number: z.string().optional(),
    checking_or_savings: z.string().optional(),
  }),
  iban: z.object({
    last_4: z.string().optional(),
    bic: z.string().optional(),
    country: z.string().optional(),
  }),
  created_at: z.string(),
  updated_at: z.string(),
})

export const zCheckKycStatusDto = z.object({
  bridgeKYCId: z.string(),
})

export const zCreateCustomerFromKycResponseDTO = z.object({
  id: z.string(),
  full_name: z.string(),
  email: z.string(),
  type: z.string(),
  kyc_link: z.string(),
  tos_link: z.string(),
  kyc_status: z.string(),
  rejection_reasons: z.array(z.string()),
  tos_status: z.string(),
  created_at: z.string(),
  customer_id: z.string(),
  persona_inquiry_type: z.string(),
  virtualAccountsCreated: z.boolean().optional(),
})

export const zCreateLiquidationAddressShortDTO = z.object({
  percentage: z.string(),
  bridgeExternalAccountId: z.string(),
  vaultName: z.string(),
})

export const zLiquidationAddressEntity = z.object({
  auth0Id: z.string(),
  id: z.string(),
  bridgeLiquidationAddressId: z.string(),
  chain: z.string(),
  state: z.string(),
  address: z.string(),
  currency: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  developer_fee: z.object({
    percent: z.string().optional(),
  }),
  external_account_id: z.string(),
  destination_currency: z.string(),
  destination_payment_rail: z.string(),
  custom_developer_fee_percent: z.string(),
  vault_name: z.string(),
})

export const zGetLiqAddressDrainHistoryDTO = z.object({
  liqAddressId: z.string(),
})

export const zGetLiqAddressDrainHistoryResponseDTO = z.object({})

export const zVirtualAccountDestinationDto = z.object({
  payment_rail: z.string(),
  currency: z.enum(['usdc']),
  address: z.string(),
})

export const zVirtualAccountEntity = z.object({
  auth0Id: z.string(),
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  source_deposit_instructions: zFunction,
  destination: zVirtualAccountDestinationDto,
  developer_fee_percent: z.string(),
  vault_name: z.string(),
})

export const zCreateUnifiedAccountDto = z.object({
  vaultName: z.string(),
  transferType: z.enum(['bridge', 'direct_web3']),
  feePercentage: z.string().optional(),
  chain: z.enum(['base']),
  currency: z.enum(['usdc', 'usdt', 'eurc']),
  destinationPaymentRail: z.enum(['ach', 'wire', 'sepa', 'base']),
  destinationCurrency: z.enum(['usd', 'eur', 'usdc', 'usdt', 'eurc']),
  destinationAddress: z.string().optional(),
  bankingInfo: zFunction.optional(),
  destinationWireMessage: z.string().optional(),
  destinationSepaReference: z.string().optional(),
})

export const zVirtualAccountSourceDto = z.object({
  currency: z.enum(['usd', 'eur']),
})

export const zCreateBridgeVirtualAccountDto = z.object({
  source: zVirtualAccountSourceDto,
  destination: zVirtualAccountDestinationDto,
  developer_fee_percent: z.string(),
})

export const zCreateVirtualAccountDto = z.object({
  bridgeCustomerId: z.string(),
  virtualAccountData: zCreateBridgeVirtualAccountDto,
  vaultName: z.string(),
})

export const zVirtualAccountActivityItemSourceDetailsDto = z.object({
  payment_rail: z.string(),
  description: z.string(),
  sender_name: z.string(),
  sender_bank_routing_number: z.string(),
  trace_number: z.string(),
})

export const zVirtualAccountActivityItem = z.object({
  id: z.string(),
  customer_id: z.string(),
  virtual_account_id: z.string(),
  type: z.string(),
  amount: z.string(),
  currency: z.string(),
  developer_fee_amount: z.string(),
  exchange_fee_amount: z.string(),
  subtotal_amount: z.string(),
  gas_fee: z.string(),
  deposit_id: z.string(),
  created_at: z.string(),
  source: zVirtualAccountActivityItemSourceDetailsDto,
})

export const zDirectRecipientEntity = z.object({
  auth0Id: z.string(),
  id: z.string(),
  vaultName: z.string(),
  destinationAddress: z.string(),
  chain: z.string(),
  currency: z.string(),
  feePercentage: z.string().optional(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const zTVaultFundsStatisticDto = z.object({
  amount: z.string(),
  date: z.string(),
})

export const zVaultInfoDto = z.object({
  userId: z.string(),
  projectName: z.string(),
  roles: z.array(zTShareRoleDto),
  profitSwitchName: z.string().optional(),
  profitSwitchAmount: z.number().optional(),
  profitSwitchAddress: z.string().optional(),
  ownerName: z.string(),
  ownerEmail: z.string(),
  adminWalletAddress: z.string(),
  vaultFeePercentage: z.number(),
  taxFormEnabled: z.boolean().optional(),
  agreeToTOSAndPP: z.boolean(),
  id: z.string(),
  vaultAddress: z.string().optional(),
  watching: z.boolean(),
  currentFunds: z.string().optional(),
  totalPaid: z.string().optional(),
  alreadyClaimed: z.boolean().optional(),
  tokenAddress: z.string().optional(),
  tokenId: z.string().optional(),
  walletAddress: z.string().optional(),
  claimable: z.string().optional(),
  shareholderManagerAddress: z.string(),
  transactionHash: z.string().optional(),
  transactionStatus: zTRANSACTION_STATUS.optional(),
  selfManaged: z.boolean().optional(),
  vaultFundsStatistics: z.array(zTVaultFundsStatisticDto),
})

export const zVaultTransactionStatusDTO = z.object({
  status: zTRANSACTION_STATUS,
})

export const zSelfManagedVaultTransactionStatusDTO = z.object({
  status: zTRANSACTION_STATUS,
  info: z
    .object({
      a: z.string().optional(),
      p: z.string().optional(),
    })
    .optional(),
})

export const zVaultCreationDto = z.object({
  userId: z.string(),
  projectName: z.string(),
  roles: z.array(zTShareRoleDto),
  profitSwitchName: z.string().optional(),
  profitSwitchAmount: z.number().optional(),
  profitSwitchAddress: z.string().optional(),
  ownerName: z.string(),
  ownerEmail: z.string(),
  adminWalletAddress: z.string(),
  vaultFeePercentage: z.number(),
  taxFormEnabled: z.boolean().optional(),
  agreeToTOSAndPP: z.boolean(),
  businessName: z.string().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  country: z.string().optional(),
  zip: z.string().optional(),
  tinSsn: z.string().optional(),
})

export const zUpdateRoleEmailDto = z.object({
  tokenAddress: z.string(),
})

export const zVaultKeysDto = z.object({
  id: z.string(),
  projectName: z.string(),
  roles: z.array(zTShareRoleDto),
  vaultFeePercentage: z.number(),
  vaultAddress: z.string().optional(),
  amount: z.number(),
  tokenAddress: z.string(),
  tokenId: z.string(),
  walletAddress: z.string(),
  claimable: z.string(),
})

export const zSignVaultTransactionDto = z.object({
  vaultId: z.string(),
  p: z.string(),
  address: z.string(),
})

export const zSignVaultTransactionResultDto = z.object({
  signature: z.string().optional(),
})

export const zPersonaInquiryIdResponseDTO = z.object({
  inquiryId: z.string(),
})

export const zPersonaReviewStatus = z.enum(['pending', 'completed'])

export const zPersonaApplicantDetailDTO = z.object({
  applicantStatus: zPersonaReviewStatus,
})

export const zPersonaApplicantResponseDTO = z.object({
  id: z.string(),
  auth0Id: z.string(),
  applicantStatus: zPersonaReviewStatus,
})

export const zCreateAddressActivityDto = z.object({
  webhookId: z.string(),
  id: z.string(),
  createdAt: z.string(),
  type: z.string(),
  event: z.object({}),
})

export const zCreateSupportTicketDto = z.object({
  name: z.string(),
  email: z.string(),
  subject: z.string(),
  message: z.string(),
})

export const zTransactionItemResponseDto = z.object({
  id: z.string(),
  source: z.enum(['alchemy', 'bridge', 'manual']),
  sourceEventId: z.string(),
  customerId: z.string(),
  virtualAccountId: z.string(),
  type: z.enum(['funds_received', 'payment_submitted', 'refund', 'funds_sent']),
  amount: z.number(),
  currency: z.string(),
  developerFeeAmount: z.number(),
  exchangeFeeAmount: z.number(),
  depositId: z.string(),
  description: z.string(),
  senderName: z.string(),
  traceNumber: z.string(),
  fromAddress: z.string(),
  toAddress: z.string(),
  hash: z.string(),
  network: z.string(),
  senderUser: z.object({}),
  receiverUser: z.object({}),
  occurredAt: z.number(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const zGetTransactionItemsResponseDto = z.object({
  items: z.array(zTransactionItemResponseDto),
  limit: z.number(),
  count: z.number(),
  nextCursor: z.object({}).optional(),
})

export const zCurrencyRateDto = z.object({
  usd: z.number(),
  eur: z.number(),
})

export const zForexRatesResponseDto = z.object({
  usdt: zCurrencyRateDto,
  usdc: zCurrencyRateDto,
  eurc: zCurrencyRateDto,
  lastUpdated: z.number(),
})

export const zUsBankAccount = z.object({
  account_number: z.string(),
  routing_number: z.string(),
})

export const zAddress = z.object({
  street_line_1: z.string(),
  street_line_2: z.string(),
  city: z.string(),
  state: z.string().optional(),
  postal_code: z.string(),
  country: z.string(),
})

export const zCreateUsExternalAccountDTO = z.object({
  account: zUsBankAccount,
  currency: z.enum(['usd']),
  account_owner_name: z.string(),
  bank_name: z.string(),
  address: zAddress,
})

export const zIban = z.object({
  account_number: z.string(),
  bic: z.string(),
  country: z.string(),
})

export const zCreateIbanExternalAccountDTO = z.object({
  iban: zIban,
  account_type: z.enum(['iban']),
  currency: z.enum(['eur']),
  account_owner_type: z.enum(['individual', 'business']),
  first_name: z.string().optional(),
  business_name: z.string().optional(),
  last_name: z.string().optional(),
  account_owner_name: z.string(),
  bank_name: z.string(),
  address: zAddress,
})

export const zSourceDepositInstructionsUsDto = z.object({
  currency: z.enum(['usd']),
  bank_beneficiary_name: z.object({}),
  bank_beneficiary_address: z.object({}),
  bank_name: z.string(),
  bank_address: z.string(),
  bank_routing_number: z.string(),
  bank_account_number: z.string(),
  payment_rails: z.array(z.array(z.unknown())),
  payment_rail: z.array(z.string()),
})

export const zSourceDepositInstructionsIbanDto = z.object({
  currency: z.enum(['eur']),
  iban: z.string(),
  bic: z.string(),
  account_holder_name: z.string(),
  bank_name: z.string(),
  bank_address: z.string(),
  payment_rails: z.array(z.array(z.unknown())),
  payment_rail: z.array(z.string()),
})
