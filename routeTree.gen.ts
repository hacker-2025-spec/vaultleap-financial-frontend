/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoadingRouteImport } from './routes/loading'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicTermsOfServiceRouteImport } from './routes/_public/terms-of-service'
import { Route as PublicPrivacyPolicyRouteImport } from './routes/_public/privacy-policy'
import { Route as PublicHelpCenterRouteImport } from './routes/_public/help-center'
import { Route as PublicFaqRouteImport } from './routes/_public/faq'
import { Route as ProtectedWalletRouteImport } from './routes/_protected/wallet'
import { Route as ProtectedTaxCenterRouteImport } from './routes/_protected/tax-center'
import { Route as ProtectedSupportRouteImport } from './routes/_protected/support'
import { Route as ProtectedSettingsRouteImport } from './routes/_protected/settings'
import { Route as ProtectedSecurityRouteImport } from './routes/_protected/security'
import { Route as ProtectedProfileRouteImport } from './routes/_protected/profile'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'

const LoadingRoute = LoadingRouteImport.update({
  id: '/loading',
  path: '/loading',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const PublicTermsOfServiceRoute = PublicTermsOfServiceRouteImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => PublicRoute,
} as any)
const PublicPrivacyPolicyRoute = PublicPrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => PublicRoute,
} as any)
const PublicHelpCenterRoute = PublicHelpCenterRouteImport.update({
  id: '/help-center',
  path: '/help-center',
  getParentRoute: () => PublicRoute,
} as any)
const PublicFaqRoute = PublicFaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedWalletRoute = ProtectedWalletRouteImport.update({
  id: '/wallet',
  path: '/wallet',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedTaxCenterRoute = ProtectedTaxCenterRouteImport.update({
  id: '/tax-center',
  path: '/tax-center',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedSupportRoute = ProtectedSupportRouteImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedSettingsRoute = ProtectedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedSecurityRoute = ProtectedSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProfileRoute = ProtectedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/loading': typeof LoadingRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/profile': typeof ProtectedProfileRoute
  '/security': typeof ProtectedSecurityRoute
  '/settings': typeof ProtectedSettingsRoute
  '/support': typeof ProtectedSupportRoute
  '/tax-center': typeof ProtectedTaxCenterRoute
  '/wallet': typeof ProtectedWalletRoute
  '/faq': typeof PublicFaqRoute
  '/help-center': typeof PublicHelpCenterRoute
  '/privacy-policy': typeof PublicPrivacyPolicyRoute
  '/terms-of-service': typeof PublicTermsOfServiceRoute
  '/': typeof PublicIndexRoute
}
export interface FileRoutesByTo {
  '/loading': typeof LoadingRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/profile': typeof ProtectedProfileRoute
  '/security': typeof ProtectedSecurityRoute
  '/settings': typeof ProtectedSettingsRoute
  '/support': typeof ProtectedSupportRoute
  '/tax-center': typeof ProtectedTaxCenterRoute
  '/wallet': typeof ProtectedWalletRoute
  '/faq': typeof PublicFaqRoute
  '/help-center': typeof PublicHelpCenterRoute
  '/privacy-policy': typeof PublicPrivacyPolicyRoute
  '/terms-of-service': typeof PublicTermsOfServiceRoute
  '/': typeof PublicIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/loading': typeof LoadingRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/profile': typeof ProtectedProfileRoute
  '/_protected/security': typeof ProtectedSecurityRoute
  '/_protected/settings': typeof ProtectedSettingsRoute
  '/_protected/support': typeof ProtectedSupportRoute
  '/_protected/tax-center': typeof ProtectedTaxCenterRoute
  '/_protected/wallet': typeof ProtectedWalletRoute
  '/_public/faq': typeof PublicFaqRoute
  '/_public/help-center': typeof PublicHelpCenterRoute
  '/_public/privacy-policy': typeof PublicPrivacyPolicyRoute
  '/_public/terms-of-service': typeof PublicTermsOfServiceRoute
  '/_public/': typeof PublicIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/loading'
    | '/dashboard'
    | '/profile'
    | '/security'
    | '/settings'
    | '/support'
    | '/tax-center'
    | '/wallet'
    | '/faq'
    | '/help-center'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/loading'
    | '/dashboard'
    | '/profile'
    | '/security'
    | '/settings'
    | '/support'
    | '/tax-center'
    | '/wallet'
    | '/faq'
    | '/help-center'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/loading'
    | '/_protected/dashboard'
    | '/_protected/profile'
    | '/_protected/security'
    | '/_protected/settings'
    | '/_protected/support'
    | '/_protected/tax-center'
    | '/_protected/wallet'
    | '/_public/faq'
    | '/_public/help-center'
    | '/_public/privacy-policy'
    | '/_public/terms-of-service'
    | '/_public/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  LoadingRoute: typeof LoadingRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/loading': {
      id: '/loading'
      path: '/loading'
      fullPath: '/loading'
      preLoaderRoute: typeof LoadingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/terms-of-service': {
      id: '/_public/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof PublicTermsOfServiceRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/privacy-policy': {
      id: '/_public/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PublicPrivacyPolicyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/help-center': {
      id: '/_public/help-center'
      path: '/help-center'
      fullPath: '/help-center'
      preLoaderRoute: typeof PublicHelpCenterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/faq': {
      id: '/_public/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof PublicFaqRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/wallet': {
      id: '/_protected/wallet'
      path: '/wallet'
      fullPath: '/wallet'
      preLoaderRoute: typeof ProtectedWalletRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/tax-center': {
      id: '/_protected/tax-center'
      path: '/tax-center'
      fullPath: '/tax-center'
      preLoaderRoute: typeof ProtectedTaxCenterRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/support': {
      id: '/_protected/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof ProtectedSupportRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/security': {
      id: '/_protected/security'
      path: '/security'
      fullPath: '/security'
      preLoaderRoute: typeof ProtectedSecurityRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedProfileRoute: typeof ProtectedProfileRoute
  ProtectedSecurityRoute: typeof ProtectedSecurityRoute
  ProtectedSettingsRoute: typeof ProtectedSettingsRoute
  ProtectedSupportRoute: typeof ProtectedSupportRoute
  ProtectedTaxCenterRoute: typeof ProtectedTaxCenterRoute
  ProtectedWalletRoute: typeof ProtectedWalletRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedProfileRoute: ProtectedProfileRoute,
  ProtectedSecurityRoute: ProtectedSecurityRoute,
  ProtectedSettingsRoute: ProtectedSettingsRoute,
  ProtectedSupportRoute: ProtectedSupportRoute,
  ProtectedTaxCenterRoute: ProtectedTaxCenterRoute,
  ProtectedWalletRoute: ProtectedWalletRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicFaqRoute: typeof PublicFaqRoute
  PublicHelpCenterRoute: typeof PublicHelpCenterRoute
  PublicPrivacyPolicyRoute: typeof PublicPrivacyPolicyRoute
  PublicTermsOfServiceRoute: typeof PublicTermsOfServiceRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicFaqRoute: PublicFaqRoute,
  PublicHelpCenterRoute: PublicHelpCenterRoute,
  PublicPrivacyPolicyRoute: PublicPrivacyPolicyRoute,
  PublicTermsOfServiceRoute: PublicTermsOfServiceRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  LoadingRoute: LoadingRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
