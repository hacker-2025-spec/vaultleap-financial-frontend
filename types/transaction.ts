// Transaction types for React Query implementation
export enum TRANSACTION_TYPES {
  CREATE_VAULT = 'CREATE_VAULT',
  CREATE_VAULTS = 'CREATE_VAULTS',
  CREATE_VAULTS_SINGLE = 'CREATE_VAULTS_SINGLE',
  SEND_FUNDS_TO_VAULT = 'SEND_FUNDS_TO_VAULT',
  CLAIM_VAULT_KEY = 'CLAIM_VAULT_KEY',
  CLAIM_REWARD = 'CLAIM_REWARD',
  TRANSFER_VAULT = 'TRANSFER_VAULT',
  WITHDRAW_USDC = 'WITHDRAW_USDC',
  RECLAIM_VAULT_KEY = 'RECLAIM_VAULT_KEY',
  CREATE_SELF_MANAGED_VAULT = 'CREATE_SELF_MANAGED_VAULT',
  CLAIM_SELF_MANAGED_VAULT_KEYS = 'CLAIM_SELF_MANAGED_VAULT_KEYS'
}

export enum TRANSACTION_STATUS {
  IDLE = 'IDLE',
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS',
  FAILURE = 'FAILURE',
}

// Transaction stages for different transaction types
export enum CREATE_VAULT_STAGES {
  INITIALIZE_VAULT = 'INITIALIZE_VAULT',
  SUBMIT_VAULT_CONTRACTS_DEPLOYMENTS = 'SUBMIT_VAULT_CONTRACTS_DEPLOYMENTS',
  WAIT_FOR_VAULT_CONTRACTS_DEPLOYMENT = 'WAIT_FOR_VAULT_CONTRACTS_DEPLOYMENT',
  SEND_VAULT_SUMMARY = 'SEND_VAULT_SUMMARY',
  SEND_VAULT_INVITATIONS = 'SEND_VAULT_INVITATIONS',
}

export enum CREATE_VAULTS_STAGES {
  INITIALIZE_VAULTS = 'INITIALIZE_VAULTS',
  SUBMIT_VAULTS_CONTRACTS = 'SUBMIT_VAULTS_CONTRACTS',
  SEND_VAULTS_EMAILS = 'SEND_VAULTS_EMAILS',
}

export enum SEND_FUNDS_TO_VAULT_STAGES {
  CHECKING_VAULT = 'CHECKING_VAULT',
  CHECKING_ALLOWANCE = 'CHECKING_ALLOWANCE',
  APPROVING_FUNDS = 'APPROVING_FUNDS',
  SENDING_FUNDS = 'SENDING_FUNDS',
}

export enum CLAIM_VAULT_KEY_STAGES {
  SYNCHRONIZE_CONTRACTS = 'SYNCHRONIZE_CONTRACTS',
  SIGNING_TRANSACTION = 'SIGNING_TRANSACTION',
  WAIT_FOR_TRANSACTION_CONFIRMATION = 'WAIT_FOR_TRANSACTION_CONFIRMATION',
}

export type TAvailableTransactionStages = 
  | CREATE_VAULT_STAGES 
  | CREATE_VAULTS_STAGES 
  | SEND_FUNDS_TO_VAULT_STAGES 
  | CLAIM_VAULT_KEY_STAGES

// Transaction state interface for React Query
export interface TransactionState {
  currentProcessedTransaction: TRANSACTION_TYPES | null
  currentStage: TAvailableTransactionStages | null
  allStages: TAvailableTransactionStages[]
  remainingStages: TAvailableTransactionStages[]
  status: TRANSACTION_STATUS
  error: string | null
}

// Transaction modal props
export interface TransactionModalProps {
  isOpen: boolean
  onClose: () => void
  transactionState: TransactionState
}
